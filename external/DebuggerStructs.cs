// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: external/debugger_structs.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from external/debugger_structs.proto</summary>
public static partial class DebuggerStructsReflection {

  #region Descriptor
  /// <summary>File descriptor for external/debugger_structs.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static DebuggerStructsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Ch9leHRlcm5hbC9kZWJ1Z2dlcl9zdHJ1Y3RzLnByb3RvIpQDCg5EYmdHcFJl",
          "Z2lzdGVycxINCgVyX3IxNRgBIAEoBBINCgVyX3IxNBgCIAEoBBINCgVyX3Ix",
          "MxgDIAEoBBINCgVyX3IxMhgEIAEoBBINCgVyX3IxMRgFIAEoBBINCgVyX3Ix",
          "MBgGIAEoBBIMCgRyX3I5GAcgASgEEgwKBHJfcjgYCCABKAQSDQoFcl9yZGkY",
          "CSABKAQSDQoFcl9yc2kYCiABKAQSDQoFcl9yYnAYCyABKAQSDQoFcl9yYngY",
          "DCABKAQSDQoFcl9yZHgYDSABKAQSDQoFcl9yY3gYDiABKAQSDQoFcl9yYXgY",
          "DyABKAQSEAoIcl90cmFwbm8YECABKA0SDAoEcl9mcxgRIAEoDRIMCgRyX2dz",
          "GBIgASgNEg0KBXJfZXJyGBMgASgNEgwKBHJfZXMYFCABKA0SDAoEcl9kcxgV",
          "IAEoDRINCgVyX3JpcBgWIAEoBBIMCgRyX2NzGBcgASgEEhAKCHJfcmZsYWdz",
          "GBggASgEEg0KBXJfcnNwGBkgASgEEgwKBHJfc3MYGiABKAQiHgoORGJnRnBS",
          "ZWdpc3RlcnMSDAoEZGF0YRgBIAEoDCIjCg5EYmdEYlJlZ2lzdGVycxIRCglk",
          "ZWJ1Z1JlZ3MYASADKA0ijwEKEERiZ1RocmVhZExpbWl0ZWQSDAoEcHJvYxgB",
          "IAEoBBIQCgh0aHJlYWRJZBgCIAEoBRIMCgRuYW1lGAMgASgJEg4KBnJldHZh",
          "bBgEIAEoAxITCgtrZXJuZWxTdGFjaxgFIAEoBBIYChBrZXJuZWxTdGFja1Bh",
          "Z2VzGAYgASgFEg4KBmVycl9ubxgHIAEoBSL+AQoNRGJnVGhyZWFkRnVsbBIM",
          "CgRwcm9jGAEgASgEEhAKCHRocmVhZElkGAIgASgFEgwKBG5hbWUYAyABKAkS",
          "DgoGcmV0dmFsGAQgASgDEhMKC2tlcm5lbFN0YWNrGAUgASgEEhgKEGtlcm5l",
          "bFN0YWNrUGFnZXMYBiABKAUSDgoGZXJyX25vGAcgASgFEiQKC2dwUmVnaXN0",
          "ZXJzGAggASgLMg8uRGJnR3BSZWdpc3RlcnMSJAoLZnBSZWdpc3RlcnMYCSAB",
          "KAsyDy5EYmdGcFJlZ2lzdGVycxIkCgtkYlJlZ2lzdGVycxgKIAEoCzIPLkRi",
          "Z0RiUmVnaXN0ZXJzIs4BCgdEYmdDcmVkEhcKD2VmZmVjdGl2ZVVzZXJJZBgB",
          "IAEoDRISCgpyZWFsVXNlcklkGAIgASgNEhMKC3NhdmVkVXNlcklkGAMgASgN",
          "EhEKCW51bUdyb3VwcxgEIAEoBRITCgtyZWFsR3JvdXBJZBgFIAEoDRIUCgxz",
          "YXZlZEdyb3VwSWQYBiABKA0SDgoGcHJpc29uGAcgASgEEhEKCXNjZUF1dGhJ",
          "ZBgIIAEoBBIPCgdzY2VDYXBzGAkgAygEEg8KB3NjZUF0dHIYCiADKAQiDQoL",
          "RGJnRmlsZURlc2MipgMKDkRiZ1Byb2Nlc3NGdWxsEiIKB3RocmVhZHMYASAD",
          "KAsyES5EYmdUaHJlYWRMaW1pdGVkEg4KBnVudXNlZBgCIAEoDRIRCglwcm9j",
          "ZXNzSWQYAyABKAUSEgoKcGFyZW50UHJvYxgEIAEoBBINCgVvcHBpZBgFIAEo",
          "BRIQCghkYmdDaGlsZBgGIAEoBRIPCgd2bXNwYWNlGAcgASgEEhMKC2V4aXRU",
          "aHJlYWRzGAggASgFEhEKCXNpZ1BhcmVudBgJIAEoBRILCgNzaWcYCiABKAUS",
          "DAoEY29kZRgLIAEoDRINCgVzdG9wcxgMIAEoDRINCgVzdHlwZRgNIAEoDRIU",
          "CgxzaW5nbGVUaHJlYWQYDiABKAQSFAoMc3VzcGVuZENvdW50GA8gASgFEg4K",
          "BmR5bmxpYhgQIAEoBBIMCgRuYW1lGBEgASgJEg8KB2VsZlBhdGgYEiABKAkS",
          "FgoOcmFuZG9taXplZFBhdGgYEyABKAkSEgoKbnVtVGhyZWFkcxgUIAEoBRIf",
          "CgptYXBFbnRyaWVzGBUgAygLMgsuRGJnVm1FbnRyeSJaCgpEYmdWbUVudHJ5",
          "EgwKBG5hbWUYASABKAkSDQoFc3RhcnQYAiABKAQSCwoDZW5kGAMgASgEEg4K",
          "Bm9mZnNldBgEIAEoBBISCgpwcm90ZWN0aW9uGAUgASgFIlIKEURiZ1Byb2Nl",
          "c3NMaW1pdGVkEhEKCXByb2Nlc3NJZBgBIAEoBRIMCgRuYW1lGAIgASgJEhwK",
          "B2VudHJpZXMYAyADKAsyCy5EYmdWbUVudHJ5YgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGpRegisters), global::DbgGpRegisters.Parser, new[]{ "RR15", "RR14", "RR13", "RR12", "RR11", "RR10", "RR9", "RR8", "RRdi", "RRsi", "RRbp", "RRbx", "RRdx", "RRcx", "RRax", "RTrapno", "RFs", "RGs", "RErr", "REs", "RDs", "RRip", "RCs", "RRflags", "RRsp", "RSs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgFpRegisters), global::DbgFpRegisters.Parser, new[]{ "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgDbRegisters), global::DbgDbRegisters.Parser, new[]{ "DebugRegs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgThreadLimited), global::DbgThreadLimited.Parser, new[]{ "Proc", "ThreadId", "Name", "Retval", "KernelStack", "KernelStackPages", "ErrNo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgThreadFull), global::DbgThreadFull.Parser, new[]{ "Proc", "ThreadId", "Name", "Retval", "KernelStack", "KernelStackPages", "ErrNo", "GpRegisters", "FpRegisters", "DbRegisters" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgCred), global::DbgCred.Parser, new[]{ "EffectiveUserId", "RealUserId", "SavedUserId", "NumGroups", "RealGroupId", "SavedGroupId", "Prison", "SceAuthId", "SceCaps", "SceAttr" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgFileDesc), global::DbgFileDesc.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgProcessFull), global::DbgProcessFull.Parser, new[]{ "Threads", "Unused", "ProcessId", "ParentProc", "Oppid", "DbgChild", "Vmspace", "ExitThreads", "SigParent", "Sig", "Code", "Stops", "Stype", "SingleThread", "SuspendCount", "Dynlib", "Name", "ElfPath", "RandomizedPath", "NumThreads", "MapEntries" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgVmEntry), global::DbgVmEntry.Parser, new[]{ "Name", "Start", "End", "Offset", "Protection" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgProcessLimited), global::DbgProcessLimited.Parser, new[]{ "ProcessId", "Name", "Entries" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class DbgGpRegisters : pb::IMessage<DbgGpRegisters> {
  private static readonly pb::MessageParser<DbgGpRegisters> _parser = new pb::MessageParser<DbgGpRegisters>(() => new DbgGpRegisters());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGpRegisters> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerStructsReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGpRegisters() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGpRegisters(DbgGpRegisters other) : this() {
    rR15_ = other.rR15_;
    rR14_ = other.rR14_;
    rR13_ = other.rR13_;
    rR12_ = other.rR12_;
    rR11_ = other.rR11_;
    rR10_ = other.rR10_;
    rR9_ = other.rR9_;
    rR8_ = other.rR8_;
    rRdi_ = other.rRdi_;
    rRsi_ = other.rRsi_;
    rRbp_ = other.rRbp_;
    rRbx_ = other.rRbx_;
    rRdx_ = other.rRdx_;
    rRcx_ = other.rRcx_;
    rRax_ = other.rRax_;
    rTrapno_ = other.rTrapno_;
    rFs_ = other.rFs_;
    rGs_ = other.rGs_;
    rErr_ = other.rErr_;
    rEs_ = other.rEs_;
    rDs_ = other.rDs_;
    rRip_ = other.rRip_;
    rCs_ = other.rCs_;
    rRflags_ = other.rRflags_;
    rRsp_ = other.rRsp_;
    rSs_ = other.rSs_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGpRegisters Clone() {
    return new DbgGpRegisters(this);
  }

  /// <summary>Field number for the "r_r15" field.</summary>
  public const int RR15FieldNumber = 1;
  private ulong rR15_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RR15 {
    get { return rR15_; }
    set {
      rR15_ = value;
    }
  }

  /// <summary>Field number for the "r_r14" field.</summary>
  public const int RR14FieldNumber = 2;
  private ulong rR14_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RR14 {
    get { return rR14_; }
    set {
      rR14_ = value;
    }
  }

  /// <summary>Field number for the "r_r13" field.</summary>
  public const int RR13FieldNumber = 3;
  private ulong rR13_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RR13 {
    get { return rR13_; }
    set {
      rR13_ = value;
    }
  }

  /// <summary>Field number for the "r_r12" field.</summary>
  public const int RR12FieldNumber = 4;
  private ulong rR12_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RR12 {
    get { return rR12_; }
    set {
      rR12_ = value;
    }
  }

  /// <summary>Field number for the "r_r11" field.</summary>
  public const int RR11FieldNumber = 5;
  private ulong rR11_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RR11 {
    get { return rR11_; }
    set {
      rR11_ = value;
    }
  }

  /// <summary>Field number for the "r_r10" field.</summary>
  public const int RR10FieldNumber = 6;
  private ulong rR10_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RR10 {
    get { return rR10_; }
    set {
      rR10_ = value;
    }
  }

  /// <summary>Field number for the "r_r9" field.</summary>
  public const int RR9FieldNumber = 7;
  private ulong rR9_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RR9 {
    get { return rR9_; }
    set {
      rR9_ = value;
    }
  }

  /// <summary>Field number for the "r_r8" field.</summary>
  public const int RR8FieldNumber = 8;
  private ulong rR8_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RR8 {
    get { return rR8_; }
    set {
      rR8_ = value;
    }
  }

  /// <summary>Field number for the "r_rdi" field.</summary>
  public const int RRdiFieldNumber = 9;
  private ulong rRdi_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRdi {
    get { return rRdi_; }
    set {
      rRdi_ = value;
    }
  }

  /// <summary>Field number for the "r_rsi" field.</summary>
  public const int RRsiFieldNumber = 10;
  private ulong rRsi_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRsi {
    get { return rRsi_; }
    set {
      rRsi_ = value;
    }
  }

  /// <summary>Field number for the "r_rbp" field.</summary>
  public const int RRbpFieldNumber = 11;
  private ulong rRbp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRbp {
    get { return rRbp_; }
    set {
      rRbp_ = value;
    }
  }

  /// <summary>Field number for the "r_rbx" field.</summary>
  public const int RRbxFieldNumber = 12;
  private ulong rRbx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRbx {
    get { return rRbx_; }
    set {
      rRbx_ = value;
    }
  }

  /// <summary>Field number for the "r_rdx" field.</summary>
  public const int RRdxFieldNumber = 13;
  private ulong rRdx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRdx {
    get { return rRdx_; }
    set {
      rRdx_ = value;
    }
  }

  /// <summary>Field number for the "r_rcx" field.</summary>
  public const int RRcxFieldNumber = 14;
  private ulong rRcx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRcx {
    get { return rRcx_; }
    set {
      rRcx_ = value;
    }
  }

  /// <summary>Field number for the "r_rax" field.</summary>
  public const int RRaxFieldNumber = 15;
  private ulong rRax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRax {
    get { return rRax_; }
    set {
      rRax_ = value;
    }
  }

  /// <summary>Field number for the "r_trapno" field.</summary>
  public const int RTrapnoFieldNumber = 16;
  private uint rTrapno_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RTrapno {
    get { return rTrapno_; }
    set {
      rTrapno_ = value;
    }
  }

  /// <summary>Field number for the "r_fs" field.</summary>
  public const int RFsFieldNumber = 17;
  private uint rFs_;
  /// <summary>
  ///  uint16
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RFs {
    get { return rFs_; }
    set {
      rFs_ = value;
    }
  }

  /// <summary>Field number for the "r_gs" field.</summary>
  public const int RGsFieldNumber = 18;
  private uint rGs_;
  /// <summary>
  ///  uint16
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RGs {
    get { return rGs_; }
    set {
      rGs_ = value;
    }
  }

  /// <summary>Field number for the "r_err" field.</summary>
  public const int RErrFieldNumber = 19;
  private uint rErr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RErr {
    get { return rErr_; }
    set {
      rErr_ = value;
    }
  }

  /// <summary>Field number for the "r_es" field.</summary>
  public const int REsFieldNumber = 20;
  private uint rEs_;
  /// <summary>
  ///  uint16
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint REs {
    get { return rEs_; }
    set {
      rEs_ = value;
    }
  }

  /// <summary>Field number for the "r_ds" field.</summary>
  public const int RDsFieldNumber = 21;
  private uint rDs_;
  /// <summary>
  ///  uint16
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RDs {
    get { return rDs_; }
    set {
      rDs_ = value;
    }
  }

  /// <summary>Field number for the "r_rip" field.</summary>
  public const int RRipFieldNumber = 22;
  private ulong rRip_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRip {
    get { return rRip_; }
    set {
      rRip_ = value;
    }
  }

  /// <summary>Field number for the "r_cs" field.</summary>
  public const int RCsFieldNumber = 23;
  private ulong rCs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RCs {
    get { return rCs_; }
    set {
      rCs_ = value;
    }
  }

  /// <summary>Field number for the "r_rflags" field.</summary>
  public const int RRflagsFieldNumber = 24;
  private ulong rRflags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRflags {
    get { return rRflags_; }
    set {
      rRflags_ = value;
    }
  }

  /// <summary>Field number for the "r_rsp" field.</summary>
  public const int RRspFieldNumber = 25;
  private ulong rRsp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRsp {
    get { return rRsp_; }
    set {
      rRsp_ = value;
    }
  }

  /// <summary>Field number for the "r_ss" field.</summary>
  public const int RSsFieldNumber = 26;
  private ulong rSs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RSs {
    get { return rSs_; }
    set {
      rSs_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGpRegisters);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGpRegisters other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RR15 != other.RR15) return false;
    if (RR14 != other.RR14) return false;
    if (RR13 != other.RR13) return false;
    if (RR12 != other.RR12) return false;
    if (RR11 != other.RR11) return false;
    if (RR10 != other.RR10) return false;
    if (RR9 != other.RR9) return false;
    if (RR8 != other.RR8) return false;
    if (RRdi != other.RRdi) return false;
    if (RRsi != other.RRsi) return false;
    if (RRbp != other.RRbp) return false;
    if (RRbx != other.RRbx) return false;
    if (RRdx != other.RRdx) return false;
    if (RRcx != other.RRcx) return false;
    if (RRax != other.RRax) return false;
    if (RTrapno != other.RTrapno) return false;
    if (RFs != other.RFs) return false;
    if (RGs != other.RGs) return false;
    if (RErr != other.RErr) return false;
    if (REs != other.REs) return false;
    if (RDs != other.RDs) return false;
    if (RRip != other.RRip) return false;
    if (RCs != other.RCs) return false;
    if (RRflags != other.RRflags) return false;
    if (RRsp != other.RRsp) return false;
    if (RSs != other.RSs) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RR15 != 0UL) hash ^= RR15.GetHashCode();
    if (RR14 != 0UL) hash ^= RR14.GetHashCode();
    if (RR13 != 0UL) hash ^= RR13.GetHashCode();
    if (RR12 != 0UL) hash ^= RR12.GetHashCode();
    if (RR11 != 0UL) hash ^= RR11.GetHashCode();
    if (RR10 != 0UL) hash ^= RR10.GetHashCode();
    if (RR9 != 0UL) hash ^= RR9.GetHashCode();
    if (RR8 != 0UL) hash ^= RR8.GetHashCode();
    if (RRdi != 0UL) hash ^= RRdi.GetHashCode();
    if (RRsi != 0UL) hash ^= RRsi.GetHashCode();
    if (RRbp != 0UL) hash ^= RRbp.GetHashCode();
    if (RRbx != 0UL) hash ^= RRbx.GetHashCode();
    if (RRdx != 0UL) hash ^= RRdx.GetHashCode();
    if (RRcx != 0UL) hash ^= RRcx.GetHashCode();
    if (RRax != 0UL) hash ^= RRax.GetHashCode();
    if (RTrapno != 0) hash ^= RTrapno.GetHashCode();
    if (RFs != 0) hash ^= RFs.GetHashCode();
    if (RGs != 0) hash ^= RGs.GetHashCode();
    if (RErr != 0) hash ^= RErr.GetHashCode();
    if (REs != 0) hash ^= REs.GetHashCode();
    if (RDs != 0) hash ^= RDs.GetHashCode();
    if (RRip != 0UL) hash ^= RRip.GetHashCode();
    if (RCs != 0UL) hash ^= RCs.GetHashCode();
    if (RRflags != 0UL) hash ^= RRflags.GetHashCode();
    if (RRsp != 0UL) hash ^= RRsp.GetHashCode();
    if (RSs != 0UL) hash ^= RSs.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RR15 != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(RR15);
    }
    if (RR14 != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(RR14);
    }
    if (RR13 != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(RR13);
    }
    if (RR12 != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(RR12);
    }
    if (RR11 != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(RR11);
    }
    if (RR10 != 0UL) {
      output.WriteRawTag(48);
      output.WriteUInt64(RR10);
    }
    if (RR9 != 0UL) {
      output.WriteRawTag(56);
      output.WriteUInt64(RR9);
    }
    if (RR8 != 0UL) {
      output.WriteRawTag(64);
      output.WriteUInt64(RR8);
    }
    if (RRdi != 0UL) {
      output.WriteRawTag(72);
      output.WriteUInt64(RRdi);
    }
    if (RRsi != 0UL) {
      output.WriteRawTag(80);
      output.WriteUInt64(RRsi);
    }
    if (RRbp != 0UL) {
      output.WriteRawTag(88);
      output.WriteUInt64(RRbp);
    }
    if (RRbx != 0UL) {
      output.WriteRawTag(96);
      output.WriteUInt64(RRbx);
    }
    if (RRdx != 0UL) {
      output.WriteRawTag(104);
      output.WriteUInt64(RRdx);
    }
    if (RRcx != 0UL) {
      output.WriteRawTag(112);
      output.WriteUInt64(RRcx);
    }
    if (RRax != 0UL) {
      output.WriteRawTag(120);
      output.WriteUInt64(RRax);
    }
    if (RTrapno != 0) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(RTrapno);
    }
    if (RFs != 0) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(RFs);
    }
    if (RGs != 0) {
      output.WriteRawTag(144, 1);
      output.WriteUInt32(RGs);
    }
    if (RErr != 0) {
      output.WriteRawTag(152, 1);
      output.WriteUInt32(RErr);
    }
    if (REs != 0) {
      output.WriteRawTag(160, 1);
      output.WriteUInt32(REs);
    }
    if (RDs != 0) {
      output.WriteRawTag(168, 1);
      output.WriteUInt32(RDs);
    }
    if (RRip != 0UL) {
      output.WriteRawTag(176, 1);
      output.WriteUInt64(RRip);
    }
    if (RCs != 0UL) {
      output.WriteRawTag(184, 1);
      output.WriteUInt64(RCs);
    }
    if (RRflags != 0UL) {
      output.WriteRawTag(192, 1);
      output.WriteUInt64(RRflags);
    }
    if (RRsp != 0UL) {
      output.WriteRawTag(200, 1);
      output.WriteUInt64(RRsp);
    }
    if (RSs != 0UL) {
      output.WriteRawTag(208, 1);
      output.WriteUInt64(RSs);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RR15 != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RR15);
    }
    if (RR14 != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RR14);
    }
    if (RR13 != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RR13);
    }
    if (RR12 != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RR12);
    }
    if (RR11 != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RR11);
    }
    if (RR10 != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RR10);
    }
    if (RR9 != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RR9);
    }
    if (RR8 != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RR8);
    }
    if (RRdi != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RRdi);
    }
    if (RRsi != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RRsi);
    }
    if (RRbp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RRbp);
    }
    if (RRbx != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RRbx);
    }
    if (RRdx != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RRdx);
    }
    if (RRcx != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RRcx);
    }
    if (RRax != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RRax);
    }
    if (RTrapno != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RTrapno);
    }
    if (RFs != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RFs);
    }
    if (RGs != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RGs);
    }
    if (RErr != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RErr);
    }
    if (REs != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(REs);
    }
    if (RDs != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RDs);
    }
    if (RRip != 0UL) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RRip);
    }
    if (RCs != 0UL) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RCs);
    }
    if (RRflags != 0UL) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RRflags);
    }
    if (RRsp != 0UL) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RRsp);
    }
    if (RSs != 0UL) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RSs);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGpRegisters other) {
    if (other == null) {
      return;
    }
    if (other.RR15 != 0UL) {
      RR15 = other.RR15;
    }
    if (other.RR14 != 0UL) {
      RR14 = other.RR14;
    }
    if (other.RR13 != 0UL) {
      RR13 = other.RR13;
    }
    if (other.RR12 != 0UL) {
      RR12 = other.RR12;
    }
    if (other.RR11 != 0UL) {
      RR11 = other.RR11;
    }
    if (other.RR10 != 0UL) {
      RR10 = other.RR10;
    }
    if (other.RR9 != 0UL) {
      RR9 = other.RR9;
    }
    if (other.RR8 != 0UL) {
      RR8 = other.RR8;
    }
    if (other.RRdi != 0UL) {
      RRdi = other.RRdi;
    }
    if (other.RRsi != 0UL) {
      RRsi = other.RRsi;
    }
    if (other.RRbp != 0UL) {
      RRbp = other.RRbp;
    }
    if (other.RRbx != 0UL) {
      RRbx = other.RRbx;
    }
    if (other.RRdx != 0UL) {
      RRdx = other.RRdx;
    }
    if (other.RRcx != 0UL) {
      RRcx = other.RRcx;
    }
    if (other.RRax != 0UL) {
      RRax = other.RRax;
    }
    if (other.RTrapno != 0) {
      RTrapno = other.RTrapno;
    }
    if (other.RFs != 0) {
      RFs = other.RFs;
    }
    if (other.RGs != 0) {
      RGs = other.RGs;
    }
    if (other.RErr != 0) {
      RErr = other.RErr;
    }
    if (other.REs != 0) {
      REs = other.REs;
    }
    if (other.RDs != 0) {
      RDs = other.RDs;
    }
    if (other.RRip != 0UL) {
      RRip = other.RRip;
    }
    if (other.RCs != 0UL) {
      RCs = other.RCs;
    }
    if (other.RRflags != 0UL) {
      RRflags = other.RRflags;
    }
    if (other.RRsp != 0UL) {
      RRsp = other.RRsp;
    }
    if (other.RSs != 0UL) {
      RSs = other.RSs;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RR15 = input.ReadUInt64();
          break;
        }
        case 16: {
          RR14 = input.ReadUInt64();
          break;
        }
        case 24: {
          RR13 = input.ReadUInt64();
          break;
        }
        case 32: {
          RR12 = input.ReadUInt64();
          break;
        }
        case 40: {
          RR11 = input.ReadUInt64();
          break;
        }
        case 48: {
          RR10 = input.ReadUInt64();
          break;
        }
        case 56: {
          RR9 = input.ReadUInt64();
          break;
        }
        case 64: {
          RR8 = input.ReadUInt64();
          break;
        }
        case 72: {
          RRdi = input.ReadUInt64();
          break;
        }
        case 80: {
          RRsi = input.ReadUInt64();
          break;
        }
        case 88: {
          RRbp = input.ReadUInt64();
          break;
        }
        case 96: {
          RRbx = input.ReadUInt64();
          break;
        }
        case 104: {
          RRdx = input.ReadUInt64();
          break;
        }
        case 112: {
          RRcx = input.ReadUInt64();
          break;
        }
        case 120: {
          RRax = input.ReadUInt64();
          break;
        }
        case 128: {
          RTrapno = input.ReadUInt32();
          break;
        }
        case 136: {
          RFs = input.ReadUInt32();
          break;
        }
        case 144: {
          RGs = input.ReadUInt32();
          break;
        }
        case 152: {
          RErr = input.ReadUInt32();
          break;
        }
        case 160: {
          REs = input.ReadUInt32();
          break;
        }
        case 168: {
          RDs = input.ReadUInt32();
          break;
        }
        case 176: {
          RRip = input.ReadUInt64();
          break;
        }
        case 184: {
          RCs = input.ReadUInt64();
          break;
        }
        case 192: {
          RRflags = input.ReadUInt64();
          break;
        }
        case 200: {
          RRsp = input.ReadUInt64();
          break;
        }
        case 208: {
          RSs = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgFpRegisters : pb::IMessage<DbgFpRegisters> {
  private static readonly pb::MessageParser<DbgFpRegisters> _parser = new pb::MessageParser<DbgFpRegisters>(() => new DbgFpRegisters());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgFpRegisters> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerStructsReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFpRegisters() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFpRegisters(DbgFpRegisters other) : this() {
    data_ = other.data_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFpRegisters Clone() {
    return new DbgFpRegisters(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private pb::ByteString data_ = pb::ByteString.Empty;
  /// <summary>
  ///  I really don't feel like dealing with this
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgFpRegisters);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgFpRegisters other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Data != other.Data) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Data.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Data);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgFpRegisters other) {
    if (other == null) {
      return;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgDbRegisters : pb::IMessage<DbgDbRegisters> {
  private static readonly pb::MessageParser<DbgDbRegisters> _parser = new pb::MessageParser<DbgDbRegisters>(() => new DbgDbRegisters());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgDbRegisters> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerStructsReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgDbRegisters() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgDbRegisters(DbgDbRegisters other) : this() {
    debugRegs_ = other.debugRegs_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgDbRegisters Clone() {
    return new DbgDbRegisters(this);
  }

  /// <summary>Field number for the "debugRegs" field.</summary>
  public const int DebugRegsFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_debugRegs_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> debugRegs_ = new pbc::RepeatedField<uint>();
  /// <summary>
  ///  len 16
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> DebugRegs {
    get { return debugRegs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgDbRegisters);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgDbRegisters other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!debugRegs_.Equals(other.debugRegs_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= debugRegs_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    debugRegs_.WriteTo(output, _repeated_debugRegs_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += debugRegs_.CalculateSize(_repeated_debugRegs_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgDbRegisters other) {
    if (other == null) {
      return;
    }
    debugRegs_.Add(other.debugRegs_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          debugRegs_.AddEntriesFrom(input, _repeated_debugRegs_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DbgThreadLimited : pb::IMessage<DbgThreadLimited> {
  private static readonly pb::MessageParser<DbgThreadLimited> _parser = new pb::MessageParser<DbgThreadLimited>(() => new DbgThreadLimited());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgThreadLimited> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerStructsReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgThreadLimited() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgThreadLimited(DbgThreadLimited other) : this() {
    proc_ = other.proc_;
    threadId_ = other.threadId_;
    name_ = other.name_;
    retval_ = other.retval_;
    kernelStack_ = other.kernelStack_;
    kernelStackPages_ = other.kernelStackPages_;
    errNo_ = other.errNo_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgThreadLimited Clone() {
    return new DbgThreadLimited(this);
  }

  /// <summary>Field number for the "proc" field.</summary>
  public const int ProcFieldNumber = 1;
  private ulong proc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Proc {
    get { return proc_; }
    set {
      proc_ = value;
    }
  }

  /// <summary>Field number for the "threadId" field.</summary>
  public const int ThreadIdFieldNumber = 2;
  private int threadId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ThreadId {
    get { return threadId_; }
    set {
      threadId_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "retval" field.</summary>
  public const int RetvalFieldNumber = 4;
  private long retval_;
  /// <summary>
  ///  len 2
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Retval {
    get { return retval_; }
    set {
      retval_ = value;
    }
  }

  /// <summary>Field number for the "kernelStack" field.</summary>
  public const int KernelStackFieldNumber = 5;
  private ulong kernelStack_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong KernelStack {
    get { return kernelStack_; }
    set {
      kernelStack_ = value;
    }
  }

  /// <summary>Field number for the "kernelStackPages" field.</summary>
  public const int KernelStackPagesFieldNumber = 6;
  private int kernelStackPages_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int KernelStackPages {
    get { return kernelStackPages_; }
    set {
      kernelStackPages_ = value;
    }
  }

  /// <summary>Field number for the "err_no" field.</summary>
  public const int ErrNoFieldNumber = 7;
  private int errNo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ErrNo {
    get { return errNo_; }
    set {
      errNo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgThreadLimited);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgThreadLimited other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Proc != other.Proc) return false;
    if (ThreadId != other.ThreadId) return false;
    if (Name != other.Name) return false;
    if (Retval != other.Retval) return false;
    if (KernelStack != other.KernelStack) return false;
    if (KernelStackPages != other.KernelStackPages) return false;
    if (ErrNo != other.ErrNo) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Proc != 0UL) hash ^= Proc.GetHashCode();
    if (ThreadId != 0) hash ^= ThreadId.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Retval != 0L) hash ^= Retval.GetHashCode();
    if (KernelStack != 0UL) hash ^= KernelStack.GetHashCode();
    if (KernelStackPages != 0) hash ^= KernelStackPages.GetHashCode();
    if (ErrNo != 0) hash ^= ErrNo.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Proc != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Proc);
    }
    if (ThreadId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ThreadId);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (Retval != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(Retval);
    }
    if (KernelStack != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(KernelStack);
    }
    if (KernelStackPages != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(KernelStackPages);
    }
    if (ErrNo != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(ErrNo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Proc != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Proc);
    }
    if (ThreadId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreadId);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Retval != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Retval);
    }
    if (KernelStack != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KernelStack);
    }
    if (KernelStackPages != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(KernelStackPages);
    }
    if (ErrNo != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrNo);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgThreadLimited other) {
    if (other == null) {
      return;
    }
    if (other.Proc != 0UL) {
      Proc = other.Proc;
    }
    if (other.ThreadId != 0) {
      ThreadId = other.ThreadId;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Retval != 0L) {
      Retval = other.Retval;
    }
    if (other.KernelStack != 0UL) {
      KernelStack = other.KernelStack;
    }
    if (other.KernelStackPages != 0) {
      KernelStackPages = other.KernelStackPages;
    }
    if (other.ErrNo != 0) {
      ErrNo = other.ErrNo;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Proc = input.ReadUInt64();
          break;
        }
        case 16: {
          ThreadId = input.ReadInt32();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 32: {
          Retval = input.ReadInt64();
          break;
        }
        case 40: {
          KernelStack = input.ReadUInt64();
          break;
        }
        case 48: {
          KernelStackPages = input.ReadInt32();
          break;
        }
        case 56: {
          ErrNo = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgThreadFull : pb::IMessage<DbgThreadFull> {
  private static readonly pb::MessageParser<DbgThreadFull> _parser = new pb::MessageParser<DbgThreadFull>(() => new DbgThreadFull());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgThreadFull> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerStructsReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgThreadFull() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgThreadFull(DbgThreadFull other) : this() {
    proc_ = other.proc_;
    threadId_ = other.threadId_;
    name_ = other.name_;
    retval_ = other.retval_;
    kernelStack_ = other.kernelStack_;
    kernelStackPages_ = other.kernelStackPages_;
    errNo_ = other.errNo_;
    GpRegisters = other.gpRegisters_ != null ? other.GpRegisters.Clone() : null;
    FpRegisters = other.fpRegisters_ != null ? other.FpRegisters.Clone() : null;
    DbRegisters = other.dbRegisters_ != null ? other.DbRegisters.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgThreadFull Clone() {
    return new DbgThreadFull(this);
  }

  /// <summary>Field number for the "proc" field.</summary>
  public const int ProcFieldNumber = 1;
  private ulong proc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Proc {
    get { return proc_; }
    set {
      proc_ = value;
    }
  }

  /// <summary>Field number for the "threadId" field.</summary>
  public const int ThreadIdFieldNumber = 2;
  private int threadId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ThreadId {
    get { return threadId_; }
    set {
      threadId_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "retval" field.</summary>
  public const int RetvalFieldNumber = 4;
  private long retval_;
  /// <summary>
  ///  len 2
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Retval {
    get { return retval_; }
    set {
      retval_ = value;
    }
  }

  /// <summary>Field number for the "kernelStack" field.</summary>
  public const int KernelStackFieldNumber = 5;
  private ulong kernelStack_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong KernelStack {
    get { return kernelStack_; }
    set {
      kernelStack_ = value;
    }
  }

  /// <summary>Field number for the "kernelStackPages" field.</summary>
  public const int KernelStackPagesFieldNumber = 6;
  private int kernelStackPages_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int KernelStackPages {
    get { return kernelStackPages_; }
    set {
      kernelStackPages_ = value;
    }
  }

  /// <summary>Field number for the "err_no" field.</summary>
  public const int ErrNoFieldNumber = 7;
  private int errNo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ErrNo {
    get { return errNo_; }
    set {
      errNo_ = value;
    }
  }

  /// <summary>Field number for the "gpRegisters" field.</summary>
  public const int GpRegistersFieldNumber = 8;
  private global::DbgGpRegisters gpRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgGpRegisters GpRegisters {
    get { return gpRegisters_; }
    set {
      gpRegisters_ = value;
    }
  }

  /// <summary>Field number for the "fpRegisters" field.</summary>
  public const int FpRegistersFieldNumber = 9;
  private global::DbgFpRegisters fpRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgFpRegisters FpRegisters {
    get { return fpRegisters_; }
    set {
      fpRegisters_ = value;
    }
  }

  /// <summary>Field number for the "dbRegisters" field.</summary>
  public const int DbRegistersFieldNumber = 10;
  private global::DbgDbRegisters dbRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgDbRegisters DbRegisters {
    get { return dbRegisters_; }
    set {
      dbRegisters_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgThreadFull);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgThreadFull other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Proc != other.Proc) return false;
    if (ThreadId != other.ThreadId) return false;
    if (Name != other.Name) return false;
    if (Retval != other.Retval) return false;
    if (KernelStack != other.KernelStack) return false;
    if (KernelStackPages != other.KernelStackPages) return false;
    if (ErrNo != other.ErrNo) return false;
    if (!object.Equals(GpRegisters, other.GpRegisters)) return false;
    if (!object.Equals(FpRegisters, other.FpRegisters)) return false;
    if (!object.Equals(DbRegisters, other.DbRegisters)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Proc != 0UL) hash ^= Proc.GetHashCode();
    if (ThreadId != 0) hash ^= ThreadId.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Retval != 0L) hash ^= Retval.GetHashCode();
    if (KernelStack != 0UL) hash ^= KernelStack.GetHashCode();
    if (KernelStackPages != 0) hash ^= KernelStackPages.GetHashCode();
    if (ErrNo != 0) hash ^= ErrNo.GetHashCode();
    if (gpRegisters_ != null) hash ^= GpRegisters.GetHashCode();
    if (fpRegisters_ != null) hash ^= FpRegisters.GetHashCode();
    if (dbRegisters_ != null) hash ^= DbRegisters.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Proc != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Proc);
    }
    if (ThreadId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ThreadId);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (Retval != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(Retval);
    }
    if (KernelStack != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(KernelStack);
    }
    if (KernelStackPages != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(KernelStackPages);
    }
    if (ErrNo != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(ErrNo);
    }
    if (gpRegisters_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(GpRegisters);
    }
    if (fpRegisters_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(FpRegisters);
    }
    if (dbRegisters_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(DbRegisters);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Proc != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Proc);
    }
    if (ThreadId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreadId);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Retval != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Retval);
    }
    if (KernelStack != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KernelStack);
    }
    if (KernelStackPages != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(KernelStackPages);
    }
    if (ErrNo != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrNo);
    }
    if (gpRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GpRegisters);
    }
    if (fpRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FpRegisters);
    }
    if (dbRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DbRegisters);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgThreadFull other) {
    if (other == null) {
      return;
    }
    if (other.Proc != 0UL) {
      Proc = other.Proc;
    }
    if (other.ThreadId != 0) {
      ThreadId = other.ThreadId;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Retval != 0L) {
      Retval = other.Retval;
    }
    if (other.KernelStack != 0UL) {
      KernelStack = other.KernelStack;
    }
    if (other.KernelStackPages != 0) {
      KernelStackPages = other.KernelStackPages;
    }
    if (other.ErrNo != 0) {
      ErrNo = other.ErrNo;
    }
    if (other.gpRegisters_ != null) {
      if (gpRegisters_ == null) {
        gpRegisters_ = new global::DbgGpRegisters();
      }
      GpRegisters.MergeFrom(other.GpRegisters);
    }
    if (other.fpRegisters_ != null) {
      if (fpRegisters_ == null) {
        fpRegisters_ = new global::DbgFpRegisters();
      }
      FpRegisters.MergeFrom(other.FpRegisters);
    }
    if (other.dbRegisters_ != null) {
      if (dbRegisters_ == null) {
        dbRegisters_ = new global::DbgDbRegisters();
      }
      DbRegisters.MergeFrom(other.DbRegisters);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Proc = input.ReadUInt64();
          break;
        }
        case 16: {
          ThreadId = input.ReadInt32();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 32: {
          Retval = input.ReadInt64();
          break;
        }
        case 40: {
          KernelStack = input.ReadUInt64();
          break;
        }
        case 48: {
          KernelStackPages = input.ReadInt32();
          break;
        }
        case 56: {
          ErrNo = input.ReadInt32();
          break;
        }
        case 66: {
          if (gpRegisters_ == null) {
            gpRegisters_ = new global::DbgGpRegisters();
          }
          input.ReadMessage(gpRegisters_);
          break;
        }
        case 74: {
          if (fpRegisters_ == null) {
            fpRegisters_ = new global::DbgFpRegisters();
          }
          input.ReadMessage(fpRegisters_);
          break;
        }
        case 82: {
          if (dbRegisters_ == null) {
            dbRegisters_ = new global::DbgDbRegisters();
          }
          input.ReadMessage(dbRegisters_);
          break;
        }
      }
    }
  }

}

public sealed partial class DbgCred : pb::IMessage<DbgCred> {
  private static readonly pb::MessageParser<DbgCred> _parser = new pb::MessageParser<DbgCred>(() => new DbgCred());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgCred> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerStructsReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgCred() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgCred(DbgCred other) : this() {
    effectiveUserId_ = other.effectiveUserId_;
    realUserId_ = other.realUserId_;
    savedUserId_ = other.savedUserId_;
    numGroups_ = other.numGroups_;
    realGroupId_ = other.realGroupId_;
    savedGroupId_ = other.savedGroupId_;
    prison_ = other.prison_;
    sceAuthId_ = other.sceAuthId_;
    sceCaps_ = other.sceCaps_.Clone();
    sceAttr_ = other.sceAttr_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgCred Clone() {
    return new DbgCred(this);
  }

  /// <summary>Field number for the "effectiveUserId" field.</summary>
  public const int EffectiveUserIdFieldNumber = 1;
  private uint effectiveUserId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EffectiveUserId {
    get { return effectiveUserId_; }
    set {
      effectiveUserId_ = value;
    }
  }

  /// <summary>Field number for the "realUserId" field.</summary>
  public const int RealUserIdFieldNumber = 2;
  private uint realUserId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RealUserId {
    get { return realUserId_; }
    set {
      realUserId_ = value;
    }
  }

  /// <summary>Field number for the "savedUserId" field.</summary>
  public const int SavedUserIdFieldNumber = 3;
  private uint savedUserId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SavedUserId {
    get { return savedUserId_; }
    set {
      savedUserId_ = value;
    }
  }

  /// <summary>Field number for the "numGroups" field.</summary>
  public const int NumGroupsFieldNumber = 4;
  private int numGroups_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NumGroups {
    get { return numGroups_; }
    set {
      numGroups_ = value;
    }
  }

  /// <summary>Field number for the "realGroupId" field.</summary>
  public const int RealGroupIdFieldNumber = 5;
  private uint realGroupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RealGroupId {
    get { return realGroupId_; }
    set {
      realGroupId_ = value;
    }
  }

  /// <summary>Field number for the "savedGroupId" field.</summary>
  public const int SavedGroupIdFieldNumber = 6;
  private uint savedGroupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SavedGroupId {
    get { return savedGroupId_; }
    set {
      savedGroupId_ = value;
    }
  }

  /// <summary>Field number for the "prison" field.</summary>
  public const int PrisonFieldNumber = 7;
  private ulong prison_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Prison {
    get { return prison_; }
    set {
      prison_ = value;
    }
  }

  /// <summary>Field number for the "sceAuthId" field.</summary>
  public const int SceAuthIdFieldNumber = 8;
  private ulong sceAuthId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong SceAuthId {
    get { return sceAuthId_; }
    set {
      sceAuthId_ = value;
    }
  }

  /// <summary>Field number for the "sceCaps" field.</summary>
  public const int SceCapsFieldNumber = 9;
  private static readonly pb::FieldCodec<ulong> _repeated_sceCaps_codec
      = pb::FieldCodec.ForUInt64(74);
  private readonly pbc::RepeatedField<ulong> sceCaps_ = new pbc::RepeatedField<ulong>();
  /// <summary>
  ///  len 4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<ulong> SceCaps {
    get { return sceCaps_; }
  }

  /// <summary>Field number for the "sceAttr" field.</summary>
  public const int SceAttrFieldNumber = 10;
  private static readonly pb::FieldCodec<ulong> _repeated_sceAttr_codec
      = pb::FieldCodec.ForUInt64(82);
  private readonly pbc::RepeatedField<ulong> sceAttr_ = new pbc::RepeatedField<ulong>();
  /// <summary>
  ///  len 4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<ulong> SceAttr {
    get { return sceAttr_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgCred);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgCred other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EffectiveUserId != other.EffectiveUserId) return false;
    if (RealUserId != other.RealUserId) return false;
    if (SavedUserId != other.SavedUserId) return false;
    if (NumGroups != other.NumGroups) return false;
    if (RealGroupId != other.RealGroupId) return false;
    if (SavedGroupId != other.SavedGroupId) return false;
    if (Prison != other.Prison) return false;
    if (SceAuthId != other.SceAuthId) return false;
    if(!sceCaps_.Equals(other.sceCaps_)) return false;
    if(!sceAttr_.Equals(other.sceAttr_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EffectiveUserId != 0) hash ^= EffectiveUserId.GetHashCode();
    if (RealUserId != 0) hash ^= RealUserId.GetHashCode();
    if (SavedUserId != 0) hash ^= SavedUserId.GetHashCode();
    if (NumGroups != 0) hash ^= NumGroups.GetHashCode();
    if (RealGroupId != 0) hash ^= RealGroupId.GetHashCode();
    if (SavedGroupId != 0) hash ^= SavedGroupId.GetHashCode();
    if (Prison != 0UL) hash ^= Prison.GetHashCode();
    if (SceAuthId != 0UL) hash ^= SceAuthId.GetHashCode();
    hash ^= sceCaps_.GetHashCode();
    hash ^= sceAttr_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EffectiveUserId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(EffectiveUserId);
    }
    if (RealUserId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(RealUserId);
    }
    if (SavedUserId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(SavedUserId);
    }
    if (NumGroups != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(NumGroups);
    }
    if (RealGroupId != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(RealGroupId);
    }
    if (SavedGroupId != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(SavedGroupId);
    }
    if (Prison != 0UL) {
      output.WriteRawTag(56);
      output.WriteUInt64(Prison);
    }
    if (SceAuthId != 0UL) {
      output.WriteRawTag(64);
      output.WriteUInt64(SceAuthId);
    }
    sceCaps_.WriteTo(output, _repeated_sceCaps_codec);
    sceAttr_.WriteTo(output, _repeated_sceAttr_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EffectiveUserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EffectiveUserId);
    }
    if (RealUserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RealUserId);
    }
    if (SavedUserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SavedUserId);
    }
    if (NumGroups != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumGroups);
    }
    if (RealGroupId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RealGroupId);
    }
    if (SavedGroupId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SavedGroupId);
    }
    if (Prison != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Prison);
    }
    if (SceAuthId != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SceAuthId);
    }
    size += sceCaps_.CalculateSize(_repeated_sceCaps_codec);
    size += sceAttr_.CalculateSize(_repeated_sceAttr_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgCred other) {
    if (other == null) {
      return;
    }
    if (other.EffectiveUserId != 0) {
      EffectiveUserId = other.EffectiveUserId;
    }
    if (other.RealUserId != 0) {
      RealUserId = other.RealUserId;
    }
    if (other.SavedUserId != 0) {
      SavedUserId = other.SavedUserId;
    }
    if (other.NumGroups != 0) {
      NumGroups = other.NumGroups;
    }
    if (other.RealGroupId != 0) {
      RealGroupId = other.RealGroupId;
    }
    if (other.SavedGroupId != 0) {
      SavedGroupId = other.SavedGroupId;
    }
    if (other.Prison != 0UL) {
      Prison = other.Prison;
    }
    if (other.SceAuthId != 0UL) {
      SceAuthId = other.SceAuthId;
    }
    sceCaps_.Add(other.sceCaps_);
    sceAttr_.Add(other.sceAttr_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          EffectiveUserId = input.ReadUInt32();
          break;
        }
        case 16: {
          RealUserId = input.ReadUInt32();
          break;
        }
        case 24: {
          SavedUserId = input.ReadUInt32();
          break;
        }
        case 32: {
          NumGroups = input.ReadInt32();
          break;
        }
        case 40: {
          RealGroupId = input.ReadUInt32();
          break;
        }
        case 48: {
          SavedGroupId = input.ReadUInt32();
          break;
        }
        case 56: {
          Prison = input.ReadUInt64();
          break;
        }
        case 64: {
          SceAuthId = input.ReadUInt64();
          break;
        }
        case 74:
        case 72: {
          sceCaps_.AddEntriesFrom(input, _repeated_sceCaps_codec);
          break;
        }
        case 82:
        case 80: {
          sceAttr_.AddEntriesFrom(input, _repeated_sceAttr_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DbgFileDesc : pb::IMessage<DbgFileDesc> {
  private static readonly pb::MessageParser<DbgFileDesc> _parser = new pb::MessageParser<DbgFileDesc>(() => new DbgFileDesc());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgFileDesc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerStructsReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFileDesc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFileDesc(DbgFileDesc other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFileDesc Clone() {
    return new DbgFileDesc(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgFileDesc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgFileDesc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgFileDesc other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class DbgProcessFull : pb::IMessage<DbgProcessFull> {
  private static readonly pb::MessageParser<DbgProcessFull> _parser = new pb::MessageParser<DbgProcessFull>(() => new DbgProcessFull());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgProcessFull> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerStructsReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProcessFull() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProcessFull(DbgProcessFull other) : this() {
    threads_ = other.threads_.Clone();
    unused_ = other.unused_;
    processId_ = other.processId_;
    parentProc_ = other.parentProc_;
    oppid_ = other.oppid_;
    dbgChild_ = other.dbgChild_;
    vmspace_ = other.vmspace_;
    exitThreads_ = other.exitThreads_;
    sigParent_ = other.sigParent_;
    sig_ = other.sig_;
    code_ = other.code_;
    stops_ = other.stops_;
    stype_ = other.stype_;
    singleThread_ = other.singleThread_;
    suspendCount_ = other.suspendCount_;
    dynlib_ = other.dynlib_;
    name_ = other.name_;
    elfPath_ = other.elfPath_;
    randomizedPath_ = other.randomizedPath_;
    numThreads_ = other.numThreads_;
    mapEntries_ = other.mapEntries_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProcessFull Clone() {
    return new DbgProcessFull(this);
  }

  /// <summary>Field number for the "threads" field.</summary>
  public const int ThreadsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DbgThreadLimited> _repeated_threads_codec
      = pb::FieldCodec.ForMessage(10, global::DbgThreadLimited.Parser);
  private readonly pbc::RepeatedField<global::DbgThreadLimited> threads_ = new pbc::RepeatedField<global::DbgThreadLimited>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DbgThreadLimited> Threads {
    get { return threads_; }
  }

  /// <summary>Field number for the "unused" field.</summary>
  public const int UnusedFieldNumber = 2;
  private uint unused_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Unused {
    get { return unused_; }
    set {
      unused_ = value;
    }
  }

  /// <summary>Field number for the "processId" field.</summary>
  public const int ProcessIdFieldNumber = 3;
  private int processId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ProcessId {
    get { return processId_; }
    set {
      processId_ = value;
    }
  }

  /// <summary>Field number for the "parentProc" field.</summary>
  public const int ParentProcFieldNumber = 4;
  private ulong parentProc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong ParentProc {
    get { return parentProc_; }
    set {
      parentProc_ = value;
    }
  }

  /// <summary>Field number for the "oppid" field.</summary>
  public const int OppidFieldNumber = 5;
  private int oppid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Oppid {
    get { return oppid_; }
    set {
      oppid_ = value;
    }
  }

  /// <summary>Field number for the "dbgChild" field.</summary>
  public const int DbgChildFieldNumber = 6;
  private int dbgChild_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DbgChild {
    get { return dbgChild_; }
    set {
      dbgChild_ = value;
    }
  }

  /// <summary>Field number for the "vmspace" field.</summary>
  public const int VmspaceFieldNumber = 7;
  private ulong vmspace_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Vmspace {
    get { return vmspace_; }
    set {
      vmspace_ = value;
    }
  }

  /// <summary>Field number for the "exitThreads" field.</summary>
  public const int ExitThreadsFieldNumber = 8;
  private int exitThreads_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ExitThreads {
    get { return exitThreads_; }
    set {
      exitThreads_ = value;
    }
  }

  /// <summary>Field number for the "sigParent" field.</summary>
  public const int SigParentFieldNumber = 9;
  private int sigParent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SigParent {
    get { return sigParent_; }
    set {
      sigParent_ = value;
    }
  }

  /// <summary>Field number for the "sig" field.</summary>
  public const int SigFieldNumber = 10;
  private int sig_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Sig {
    get { return sig_; }
    set {
      sig_ = value;
    }
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 11;
  private uint code_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Code {
    get { return code_; }
    set {
      code_ = value;
    }
  }

  /// <summary>Field number for the "stops" field.</summary>
  public const int StopsFieldNumber = 12;
  private uint stops_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Stops {
    get { return stops_; }
    set {
      stops_ = value;
    }
  }

  /// <summary>Field number for the "stype" field.</summary>
  public const int StypeFieldNumber = 13;
  private uint stype_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Stype {
    get { return stype_; }
    set {
      stype_ = value;
    }
  }

  /// <summary>Field number for the "singleThread" field.</summary>
  public const int SingleThreadFieldNumber = 14;
  private ulong singleThread_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong SingleThread {
    get { return singleThread_; }
    set {
      singleThread_ = value;
    }
  }

  /// <summary>Field number for the "suspendCount" field.</summary>
  public const int SuspendCountFieldNumber = 15;
  private int suspendCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SuspendCount {
    get { return suspendCount_; }
    set {
      suspendCount_ = value;
    }
  }

  /// <summary>Field number for the "dynlib" field.</summary>
  public const int DynlibFieldNumber = 16;
  private ulong dynlib_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Dynlib {
    get { return dynlib_; }
    set {
      dynlib_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 17;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "elfPath" field.</summary>
  public const int ElfPathFieldNumber = 18;
  private string elfPath_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ElfPath {
    get { return elfPath_; }
    set {
      elfPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "randomizedPath" field.</summary>
  public const int RandomizedPathFieldNumber = 19;
  private string randomizedPath_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RandomizedPath {
    get { return randomizedPath_; }
    set {
      randomizedPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "numThreads" field.</summary>
  public const int NumThreadsFieldNumber = 20;
  private int numThreads_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NumThreads {
    get { return numThreads_; }
    set {
      numThreads_ = value;
    }
  }

  /// <summary>Field number for the "mapEntries" field.</summary>
  public const int MapEntriesFieldNumber = 21;
  private static readonly pb::FieldCodec<global::DbgVmEntry> _repeated_mapEntries_codec
      = pb::FieldCodec.ForMessage(170, global::DbgVmEntry.Parser);
  private readonly pbc::RepeatedField<global::DbgVmEntry> mapEntries_ = new pbc::RepeatedField<global::DbgVmEntry>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DbgVmEntry> MapEntries {
    get { return mapEntries_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgProcessFull);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgProcessFull other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!threads_.Equals(other.threads_)) return false;
    if (Unused != other.Unused) return false;
    if (ProcessId != other.ProcessId) return false;
    if (ParentProc != other.ParentProc) return false;
    if (Oppid != other.Oppid) return false;
    if (DbgChild != other.DbgChild) return false;
    if (Vmspace != other.Vmspace) return false;
    if (ExitThreads != other.ExitThreads) return false;
    if (SigParent != other.SigParent) return false;
    if (Sig != other.Sig) return false;
    if (Code != other.Code) return false;
    if (Stops != other.Stops) return false;
    if (Stype != other.Stype) return false;
    if (SingleThread != other.SingleThread) return false;
    if (SuspendCount != other.SuspendCount) return false;
    if (Dynlib != other.Dynlib) return false;
    if (Name != other.Name) return false;
    if (ElfPath != other.ElfPath) return false;
    if (RandomizedPath != other.RandomizedPath) return false;
    if (NumThreads != other.NumThreads) return false;
    if(!mapEntries_.Equals(other.mapEntries_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= threads_.GetHashCode();
    if (Unused != 0) hash ^= Unused.GetHashCode();
    if (ProcessId != 0) hash ^= ProcessId.GetHashCode();
    if (ParentProc != 0UL) hash ^= ParentProc.GetHashCode();
    if (Oppid != 0) hash ^= Oppid.GetHashCode();
    if (DbgChild != 0) hash ^= DbgChild.GetHashCode();
    if (Vmspace != 0UL) hash ^= Vmspace.GetHashCode();
    if (ExitThreads != 0) hash ^= ExitThreads.GetHashCode();
    if (SigParent != 0) hash ^= SigParent.GetHashCode();
    if (Sig != 0) hash ^= Sig.GetHashCode();
    if (Code != 0) hash ^= Code.GetHashCode();
    if (Stops != 0) hash ^= Stops.GetHashCode();
    if (Stype != 0) hash ^= Stype.GetHashCode();
    if (SingleThread != 0UL) hash ^= SingleThread.GetHashCode();
    if (SuspendCount != 0) hash ^= SuspendCount.GetHashCode();
    if (Dynlib != 0UL) hash ^= Dynlib.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (ElfPath.Length != 0) hash ^= ElfPath.GetHashCode();
    if (RandomizedPath.Length != 0) hash ^= RandomizedPath.GetHashCode();
    if (NumThreads != 0) hash ^= NumThreads.GetHashCode();
    hash ^= mapEntries_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    threads_.WriteTo(output, _repeated_threads_codec);
    if (Unused != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Unused);
    }
    if (ProcessId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ProcessId);
    }
    if (ParentProc != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(ParentProc);
    }
    if (Oppid != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Oppid);
    }
    if (DbgChild != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(DbgChild);
    }
    if (Vmspace != 0UL) {
      output.WriteRawTag(56);
      output.WriteUInt64(Vmspace);
    }
    if (ExitThreads != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(ExitThreads);
    }
    if (SigParent != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(SigParent);
    }
    if (Sig != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Sig);
    }
    if (Code != 0) {
      output.WriteRawTag(88);
      output.WriteUInt32(Code);
    }
    if (Stops != 0) {
      output.WriteRawTag(96);
      output.WriteUInt32(Stops);
    }
    if (Stype != 0) {
      output.WriteRawTag(104);
      output.WriteUInt32(Stype);
    }
    if (SingleThread != 0UL) {
      output.WriteRawTag(112);
      output.WriteUInt64(SingleThread);
    }
    if (SuspendCount != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(SuspendCount);
    }
    if (Dynlib != 0UL) {
      output.WriteRawTag(128, 1);
      output.WriteUInt64(Dynlib);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(138, 1);
      output.WriteString(Name);
    }
    if (ElfPath.Length != 0) {
      output.WriteRawTag(146, 1);
      output.WriteString(ElfPath);
    }
    if (RandomizedPath.Length != 0) {
      output.WriteRawTag(154, 1);
      output.WriteString(RandomizedPath);
    }
    if (NumThreads != 0) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(NumThreads);
    }
    mapEntries_.WriteTo(output, _repeated_mapEntries_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += threads_.CalculateSize(_repeated_threads_codec);
    if (Unused != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Unused);
    }
    if (ProcessId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProcessId);
    }
    if (ParentProc != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ParentProc);
    }
    if (Oppid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oppid);
    }
    if (DbgChild != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DbgChild);
    }
    if (Vmspace != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Vmspace);
    }
    if (ExitThreads != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExitThreads);
    }
    if (SigParent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SigParent);
    }
    if (Sig != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sig);
    }
    if (Code != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
    }
    if (Stops != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stops);
    }
    if (Stype != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stype);
    }
    if (SingleThread != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SingleThread);
    }
    if (SuspendCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuspendCount);
    }
    if (Dynlib != 0UL) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Dynlib);
    }
    if (Name.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (ElfPath.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ElfPath);
    }
    if (RandomizedPath.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(RandomizedPath);
    }
    if (NumThreads != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumThreads);
    }
    size += mapEntries_.CalculateSize(_repeated_mapEntries_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgProcessFull other) {
    if (other == null) {
      return;
    }
    threads_.Add(other.threads_);
    if (other.Unused != 0) {
      Unused = other.Unused;
    }
    if (other.ProcessId != 0) {
      ProcessId = other.ProcessId;
    }
    if (other.ParentProc != 0UL) {
      ParentProc = other.ParentProc;
    }
    if (other.Oppid != 0) {
      Oppid = other.Oppid;
    }
    if (other.DbgChild != 0) {
      DbgChild = other.DbgChild;
    }
    if (other.Vmspace != 0UL) {
      Vmspace = other.Vmspace;
    }
    if (other.ExitThreads != 0) {
      ExitThreads = other.ExitThreads;
    }
    if (other.SigParent != 0) {
      SigParent = other.SigParent;
    }
    if (other.Sig != 0) {
      Sig = other.Sig;
    }
    if (other.Code != 0) {
      Code = other.Code;
    }
    if (other.Stops != 0) {
      Stops = other.Stops;
    }
    if (other.Stype != 0) {
      Stype = other.Stype;
    }
    if (other.SingleThread != 0UL) {
      SingleThread = other.SingleThread;
    }
    if (other.SuspendCount != 0) {
      SuspendCount = other.SuspendCount;
    }
    if (other.Dynlib != 0UL) {
      Dynlib = other.Dynlib;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.ElfPath.Length != 0) {
      ElfPath = other.ElfPath;
    }
    if (other.RandomizedPath.Length != 0) {
      RandomizedPath = other.RandomizedPath;
    }
    if (other.NumThreads != 0) {
      NumThreads = other.NumThreads;
    }
    mapEntries_.Add(other.mapEntries_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          threads_.AddEntriesFrom(input, _repeated_threads_codec);
          break;
        }
        case 16: {
          Unused = input.ReadUInt32();
          break;
        }
        case 24: {
          ProcessId = input.ReadInt32();
          break;
        }
        case 32: {
          ParentProc = input.ReadUInt64();
          break;
        }
        case 40: {
          Oppid = input.ReadInt32();
          break;
        }
        case 48: {
          DbgChild = input.ReadInt32();
          break;
        }
        case 56: {
          Vmspace = input.ReadUInt64();
          break;
        }
        case 64: {
          ExitThreads = input.ReadInt32();
          break;
        }
        case 72: {
          SigParent = input.ReadInt32();
          break;
        }
        case 80: {
          Sig = input.ReadInt32();
          break;
        }
        case 88: {
          Code = input.ReadUInt32();
          break;
        }
        case 96: {
          Stops = input.ReadUInt32();
          break;
        }
        case 104: {
          Stype = input.ReadUInt32();
          break;
        }
        case 112: {
          SingleThread = input.ReadUInt64();
          break;
        }
        case 120: {
          SuspendCount = input.ReadInt32();
          break;
        }
        case 128: {
          Dynlib = input.ReadUInt64();
          break;
        }
        case 138: {
          Name = input.ReadString();
          break;
        }
        case 146: {
          ElfPath = input.ReadString();
          break;
        }
        case 154: {
          RandomizedPath = input.ReadString();
          break;
        }
        case 160: {
          NumThreads = input.ReadInt32();
          break;
        }
        case 170: {
          mapEntries_.AddEntriesFrom(input, _repeated_mapEntries_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DbgVmEntry : pb::IMessage<DbgVmEntry> {
  private static readonly pb::MessageParser<DbgVmEntry> _parser = new pb::MessageParser<DbgVmEntry>(() => new DbgVmEntry());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgVmEntry> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerStructsReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgVmEntry() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgVmEntry(DbgVmEntry other) : this() {
    name_ = other.name_;
    start_ = other.start_;
    end_ = other.end_;
    offset_ = other.offset_;
    protection_ = other.protection_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgVmEntry Clone() {
    return new DbgVmEntry(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "start" field.</summary>
  public const int StartFieldNumber = 2;
  private ulong start_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Start {
    get { return start_; }
    set {
      start_ = value;
    }
  }

  /// <summary>Field number for the "end" field.</summary>
  public const int EndFieldNumber = 3;
  private ulong end_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong End {
    get { return end_; }
    set {
      end_ = value;
    }
  }

  /// <summary>Field number for the "offset" field.</summary>
  public const int OffsetFieldNumber = 4;
  private ulong offset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Offset {
    get { return offset_; }
    set {
      offset_ = value;
    }
  }

  /// <summary>Field number for the "protection" field.</summary>
  public const int ProtectionFieldNumber = 5;
  private int protection_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Protection {
    get { return protection_; }
    set {
      protection_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgVmEntry);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgVmEntry other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Start != other.Start) return false;
    if (End != other.End) return false;
    if (Offset != other.Offset) return false;
    if (Protection != other.Protection) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Start != 0UL) hash ^= Start.GetHashCode();
    if (End != 0UL) hash ^= End.GetHashCode();
    if (Offset != 0UL) hash ^= Offset.GetHashCode();
    if (Protection != 0) hash ^= Protection.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Start != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Start);
    }
    if (End != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(End);
    }
    if (Offset != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(Offset);
    }
    if (Protection != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Protection);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Start != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Start);
    }
    if (End != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(End);
    }
    if (Offset != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Offset);
    }
    if (Protection != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Protection);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgVmEntry other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Start != 0UL) {
      Start = other.Start;
    }
    if (other.End != 0UL) {
      End = other.End;
    }
    if (other.Offset != 0UL) {
      Offset = other.Offset;
    }
    if (other.Protection != 0) {
      Protection = other.Protection;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          Start = input.ReadUInt64();
          break;
        }
        case 24: {
          End = input.ReadUInt64();
          break;
        }
        case 32: {
          Offset = input.ReadUInt64();
          break;
        }
        case 40: {
          Protection = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgProcessLimited : pb::IMessage<DbgProcessLimited> {
  private static readonly pb::MessageParser<DbgProcessLimited> _parser = new pb::MessageParser<DbgProcessLimited>(() => new DbgProcessLimited());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgProcessLimited> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerStructsReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProcessLimited() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProcessLimited(DbgProcessLimited other) : this() {
    processId_ = other.processId_;
    name_ = other.name_;
    entries_ = other.entries_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProcessLimited Clone() {
    return new DbgProcessLimited(this);
  }

  /// <summary>Field number for the "processId" field.</summary>
  public const int ProcessIdFieldNumber = 1;
  private int processId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ProcessId {
    get { return processId_; }
    set {
      processId_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "entries" field.</summary>
  public const int EntriesFieldNumber = 3;
  private static readonly pb::FieldCodec<global::DbgVmEntry> _repeated_entries_codec
      = pb::FieldCodec.ForMessage(26, global::DbgVmEntry.Parser);
  private readonly pbc::RepeatedField<global::DbgVmEntry> entries_ = new pbc::RepeatedField<global::DbgVmEntry>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DbgVmEntry> Entries {
    get { return entries_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgProcessLimited);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgProcessLimited other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ProcessId != other.ProcessId) return false;
    if (Name != other.Name) return false;
    if(!entries_.Equals(other.entries_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ProcessId != 0) hash ^= ProcessId.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    hash ^= entries_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ProcessId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ProcessId);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    entries_.WriteTo(output, _repeated_entries_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ProcessId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProcessId);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    size += entries_.CalculateSize(_repeated_entries_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgProcessLimited other) {
    if (other == null) {
      return;
    }
    if (other.ProcessId != 0) {
      ProcessId = other.ProcessId;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    entries_.Add(other.entries_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ProcessId = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          entries_.AddEntriesFrom(input, _repeated_entries_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code

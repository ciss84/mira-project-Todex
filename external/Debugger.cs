// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: external/debugger.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from external/debugger.proto</summary>
public static partial class DebuggerReflection {

  #region Descriptor
  /// <summary>File descriptor for external/debugger.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static DebuggerReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChdleHRlcm5hbC9kZWJ1Z2dlci5wcm90bxofZXh0ZXJuYWwvZGVidWdnZXJf",
          "c3RydWN0cy5wcm90byJCChlEYmdHZXRQcm9jZXNzTGlzdFJlc3BvbnNlEiUK",
          "CXByb2Nlc3NlcxgBIAMoCzISLkRiZ1Byb2Nlc3NMaW1pdGVkIjwKG0RiZ1Jl",
          "YWRQcm9jZXNzTWVtb3J5UmVxdWVzdBIPCgdhZGRyZXNzGAEgASgEEgwKBHNp",
          "emUYAiABKA0iLAocRGJnUmVhZFByb2Nlc3NNZW1vcnlSZXNwb25zZRIMCgRk",
          "YXRhGAEgASgMIj0KHERiZ1dyaXRlUHJvY2Vzc01lbW9yeVJlcXVlc3QSDwoH",
          "YWRkcmVzcxgBIAEoBBIMCgRkYXRhGAIgASgMIlUKHkRiZ1Byb3RlY3RQcm9j",
          "ZXNzTWVtb3J5UmVxdWVzdBIPCgdhZGRyZXNzGAEgASgEEg4KBmxlbmd0aBgC",
          "IAEoBBISCgpwcm90ZWN0aW9uGAMgASgFIh0KG0RiZ1NjYW5Qcm9jZXNzTWVt",
          "b3J5UmVxdWVzdCItChhEYmdHZXRQcm9jZXNzSW5mb1JlcXVlc3QSEQoJcHJv",
          "Y2Vzc0lkGAEgASgFIi8KH0RiZ0FsbG9jYXRlUHJvY2Vzc01lbW9yeVJlcXVl",
          "c3QSDAoEc2l6ZRgBIAEoDSJBCiBEYmdBbGxvY2F0ZVByb2Nlc3NNZW1vcnlS",
          "ZXNwb25zZRIPCgdhZGRyZXNzGAEgASgEEgwKBHNpemUYAiABKA0iPAobRGJn",
          "RnJlZVByb2Nlc3NNZW1vcnlSZXF1ZXN0Eg8KB2FkZHJlc3MYASABKAQSDAoE",
          "c2l6ZRgCIAEoDSItChhEYmdHZXRQcm9jZXNzTWFwc1JlcXVlc3QSEQoJcHJv",
          "Y2Vzc0lkGAEgASgFIiUKEERiZ0F0dGFjaFJlcXVlc3QSEQoJcHJvY2Vzc0lk",
          "GAEgASgFIiEKEERiZ0RldGFjaFJlcXVlc3QSDQoFZm9yY2UYASABKAgidgoU",
          "RGJnQnJlYWtwb2ludFJlcXVlc3QSDwoHZW5hYmxlZBgBIAEoCBIPCgdhZGRy",
          "ZXNzGAIgASgEEhAKCG9yaWdpbmFsGAMgASgNEioKDmJyZWFrcG9pbnRUeXBl",
          "GAQgASgOMhIuRGJnQnJlYWtwb2ludFR5cGUiMQoVRGJnQnJlYWtwb2ludFJl",
          "c3BvbnNlEhgKEGJyZWFrcG9pbnRIYW5kbGUYASABKAQiYAoURGJnV2F0Y2hw",
          "b2ludFJlcXVlc3QSDwoHZW5hYmxlZBgBIAEoCBIPCgdhZGRyZXNzGAIgASgE",
          "EhYKDmJyZWFrcG9pbnRUeXBlGAMgASgNEg4KBmxlbmd0aBgEIAEoDSIxChVE",
          "YmdXYXRjaHBvaW50UmVzcG9uc2USGAoQd2F0Y2hwb2ludEhhbmRsZRgBIAEo",
          "BCIwChtEYmdHZXRQcm9jZXNzVGhyZWFkc1JlcXVlc3QSEQoJcHJvY2Vzc0lk",
          "GAEgASgFIkIKHERiZ0dldFByb2Nlc3NUaHJlYWRzUmVzcG9uc2USIgoHdGhy",
          "ZWFkcxgBIAMoCzIRLkRiZ1RocmVhZExpbWl0ZWQiKQoXRGJnU2lnbmFsUHJv",
          "Y2Vzc1JlcXVlc3QSDgoGc2lnbmFsGAEgASgFIioKFkRiZ0dldFJlZ2lzdGVy",
          "c1JlcXVlc3QSEAoIdGhyZWFkSWQYASABKAUiiwEKF0RiZ0dldFJlZ2lzdGVy",
          "c1Jlc3BvbnNlEiQKC2dwUmVnaXN0ZXJzGAEgASgLMg8uRGJnR3BSZWdpc3Rl",
          "cnMSJAoLZnBSZWdpc3RlcnMYAiABKAsyDy5EYmdGcFJlZ2lzdGVycxIkCgtk",
          "YlJlZ2lzdGVycxgDIAEoCzIPLkRiZ0RiUmVnaXN0ZXJzIpwBChZEYmdTZXRS",
          "ZWdpc3RlcnNSZXF1ZXN0EhAKCHRocmVhZElkGAEgASgFEiQKC2dwUmVnaXN0",
          "ZXJzGAIgASgLMg8uRGJnR3BSZWdpc3RlcnMSJAoLZnBSZWdpc3RlcnMYAyAB",
          "KAsyDy5EYmdGcFJlZ2lzdGVycxIkCgtkYlJlZ2lzdGVycxgEIAEoCzIPLkRi",
          "Z0RiUmVnaXN0ZXJzIisKF0RiZ0dldFRocmVhZEluZm9SZXF1ZXN0EhAKCHRo",
          "cmVhZElkGAEgASgFIkUKGERiZ0dldEtlcm5lbEluZm9SZXNwb25zZRIPCgd2",
          "ZXJzaW9uGAEgASgEEhgKEGdsb2FibENvbmZpZ0RhdGEYAiABKAwiOwoaRGJn",
          "UmVhZEtlcm5lbE1lbW9yeVJlcXVlc3QSDwoHYWRkcmVzcxgBIAEoBBIMCgRz",
          "aXplGAIgASgEIisKG0RiZ1JlYWRLZXJuZWxNZW1vcnlSZXNwb25zZRIMCgRk",
          "YXRhGAEgASgMIjwKG0RiZ1dyaXRlS2VybmVsTWVtb3J5UmVxdWVzdBIPCgdh",
          "ZGRyZXNzGAEgASgEEgwKBGRhdGEYAiABKAwisAEKEURiZ0NvbW1hbmRSZXF1",
          "ZXN0Ei8KB2NvbW1hbmQYASABKA4yHi5EYmdDb21tYW5kUmVxdWVzdC5EYmdD",
          "b21tYW5kcyJqCgtEYmdDb21tYW5kcxIMCghEQkdfTk9ORRAAEg4KCkRCR19S",
          "RUJPT1QQARIQCgxEQkdfU0hVVERPV04QAhINCglEQkdfUFJJTlQQAxIOCgpE",
          "QkdfTk9USUZZEAQSDAoIREJHX0lORk8QBSpCChFEYmdCcmVha3BvaW50VHlw",
          "ZRILCgdCUF9OT05FEAASDwoLQlBfU09GVFdBUkUQARIPCgtCUF9IQVJEV0FS",
          "RRACYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::DebuggerStructsReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DbgBreakpointType), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetProcessListResponse), global::DbgGetProcessListResponse.Parser, new[]{ "Processes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgReadProcessMemoryRequest), global::DbgReadProcessMemoryRequest.Parser, new[]{ "Address", "Size" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgReadProcessMemoryResponse), global::DbgReadProcessMemoryResponse.Parser, new[]{ "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgWriteProcessMemoryRequest), global::DbgWriteProcessMemoryRequest.Parser, new[]{ "Address", "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgProtectProcessMemoryRequest), global::DbgProtectProcessMemoryRequest.Parser, new[]{ "Address", "Length", "Protection" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgScanProcessMemoryRequest), global::DbgScanProcessMemoryRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetProcessInfoRequest), global::DbgGetProcessInfoRequest.Parser, new[]{ "ProcessId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgAllocateProcessMemoryRequest), global::DbgAllocateProcessMemoryRequest.Parser, new[]{ "Size" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgAllocateProcessMemoryResponse), global::DbgAllocateProcessMemoryResponse.Parser, new[]{ "Address", "Size" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgFreeProcessMemoryRequest), global::DbgFreeProcessMemoryRequest.Parser, new[]{ "Address", "Size" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetProcessMapsRequest), global::DbgGetProcessMapsRequest.Parser, new[]{ "ProcessId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgAttachRequest), global::DbgAttachRequest.Parser, new[]{ "ProcessId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgDetachRequest), global::DbgDetachRequest.Parser, new[]{ "Force" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgBreakpointRequest), global::DbgBreakpointRequest.Parser, new[]{ "Enabled", "Address", "Original", "BreakpointType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgBreakpointResponse), global::DbgBreakpointResponse.Parser, new[]{ "BreakpointHandle" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgWatchpointRequest), global::DbgWatchpointRequest.Parser, new[]{ "Enabled", "Address", "BreakpointType", "Length" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgWatchpointResponse), global::DbgWatchpointResponse.Parser, new[]{ "WatchpointHandle" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetProcessThreadsRequest), global::DbgGetProcessThreadsRequest.Parser, new[]{ "ProcessId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetProcessThreadsResponse), global::DbgGetProcessThreadsResponse.Parser, new[]{ "Threads" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgSignalProcessRequest), global::DbgSignalProcessRequest.Parser, new[]{ "Signal" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetRegistersRequest), global::DbgGetRegistersRequest.Parser, new[]{ "ThreadId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetRegistersResponse), global::DbgGetRegistersResponse.Parser, new[]{ "GpRegisters", "FpRegisters", "DbRegisters" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgSetRegistersRequest), global::DbgSetRegistersRequest.Parser, new[]{ "ThreadId", "GpRegisters", "FpRegisters", "DbRegisters" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetThreadInfoRequest), global::DbgGetThreadInfoRequest.Parser, new[]{ "ThreadId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetKernelInfoResponse), global::DbgGetKernelInfoResponse.Parser, new[]{ "Version", "GloablConfigData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgReadKernelMemoryRequest), global::DbgReadKernelMemoryRequest.Parser, new[]{ "Address", "Size" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgReadKernelMemoryResponse), global::DbgReadKernelMemoryResponse.Parser, new[]{ "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgWriteKernelMemoryRequest), global::DbgWriteKernelMemoryRequest.Parser, new[]{ "Address", "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgCommandRequest), global::DbgCommandRequest.Parser, new[]{ "Command" }, null, new[]{ typeof(global::DbgCommandRequest.Types.DbgCommands) }, null)
        }));
  }
  #endregion

}
#region Enums
public enum DbgBreakpointType {
  [pbr::OriginalName("BP_NONE")] BpNone = 0,
  [pbr::OriginalName("BP_SOFTWARE")] BpSoftware = 1,
  [pbr::OriginalName("BP_HARDWARE")] BpHardware = 2,
}

#endregion

#region Messages
/// <summary>
///  Has no request payload
/// </summary>
public sealed partial class DbgGetProcessListResponse : pb::IMessage<DbgGetProcessListResponse> {
  private static readonly pb::MessageParser<DbgGetProcessListResponse> _parser = new pb::MessageParser<DbgGetProcessListResponse>(() => new DbgGetProcessListResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetProcessListResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessListResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessListResponse(DbgGetProcessListResponse other) : this() {
    processes_ = other.processes_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessListResponse Clone() {
    return new DbgGetProcessListResponse(this);
  }

  /// <summary>Field number for the "processes" field.</summary>
  public const int ProcessesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DbgProcessLimited> _repeated_processes_codec
      = pb::FieldCodec.ForMessage(10, global::DbgProcessLimited.Parser);
  private readonly pbc::RepeatedField<global::DbgProcessLimited> processes_ = new pbc::RepeatedField<global::DbgProcessLimited>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DbgProcessLimited> Processes {
    get { return processes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetProcessListResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetProcessListResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!processes_.Equals(other.processes_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= processes_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    processes_.WriteTo(output, _repeated_processes_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += processes_.CalculateSize(_repeated_processes_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetProcessListResponse other) {
    if (other == null) {
      return;
    }
    processes_.Add(other.processes_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          processes_.AddEntriesFrom(input, _repeated_processes_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DbgReadProcessMemoryRequest : pb::IMessage<DbgReadProcessMemoryRequest> {
  private static readonly pb::MessageParser<DbgReadProcessMemoryRequest> _parser = new pb::MessageParser<DbgReadProcessMemoryRequest>(() => new DbgReadProcessMemoryRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgReadProcessMemoryRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadProcessMemoryRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadProcessMemoryRequest(DbgReadProcessMemoryRequest other) : this() {
    address_ = other.address_;
    size_ = other.size_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadProcessMemoryRequest Clone() {
    return new DbgReadProcessMemoryRequest(this);
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 1;
  private ulong address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "size" field.</summary>
  public const int SizeFieldNumber = 2;
  private uint size_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Size {
    get { return size_; }
    set {
      size_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgReadProcessMemoryRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgReadProcessMemoryRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Address != other.Address) return false;
    if (Size != other.Size) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Address != 0UL) hash ^= Address.GetHashCode();
    if (Size != 0) hash ^= Size.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Address != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Address);
    }
    if (Size != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Size);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Address != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
    }
    if (Size != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgReadProcessMemoryRequest other) {
    if (other == null) {
      return;
    }
    if (other.Address != 0UL) {
      Address = other.Address;
    }
    if (other.Size != 0) {
      Size = other.Size;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Address = input.ReadUInt64();
          break;
        }
        case 16: {
          Size = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgReadProcessMemoryResponse : pb::IMessage<DbgReadProcessMemoryResponse> {
  private static readonly pb::MessageParser<DbgReadProcessMemoryResponse> _parser = new pb::MessageParser<DbgReadProcessMemoryResponse>(() => new DbgReadProcessMemoryResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgReadProcessMemoryResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadProcessMemoryResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadProcessMemoryResponse(DbgReadProcessMemoryResponse other) : this() {
    data_ = other.data_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadProcessMemoryResponse Clone() {
    return new DbgReadProcessMemoryResponse(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgReadProcessMemoryResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgReadProcessMemoryResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Data != other.Data) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Data.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Data);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgReadProcessMemoryResponse other) {
    if (other == null) {
      return;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgWriteProcessMemoryRequest : pb::IMessage<DbgWriteProcessMemoryRequest> {
  private static readonly pb::MessageParser<DbgWriteProcessMemoryRequest> _parser = new pb::MessageParser<DbgWriteProcessMemoryRequest>(() => new DbgWriteProcessMemoryRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgWriteProcessMemoryRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWriteProcessMemoryRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWriteProcessMemoryRequest(DbgWriteProcessMemoryRequest other) : this() {
    address_ = other.address_;
    data_ = other.data_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWriteProcessMemoryRequest Clone() {
    return new DbgWriteProcessMemoryRequest(this);
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 1;
  private ulong address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 2;
  private pb::ByteString data_ = pb::ByteString.Empty;
  /// <summary>
  ///  Size is inside here
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgWriteProcessMemoryRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgWriteProcessMemoryRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Address != other.Address) return false;
    if (Data != other.Data) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Address != 0UL) hash ^= Address.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Address != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Address);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Data);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Address != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgWriteProcessMemoryRequest other) {
    if (other == null) {
      return;
    }
    if (other.Address != 0UL) {
      Address = other.Address;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Address = input.ReadUInt64();
          break;
        }
        case 18: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgProtectProcessMemoryRequest : pb::IMessage<DbgProtectProcessMemoryRequest> {
  private static readonly pb::MessageParser<DbgProtectProcessMemoryRequest> _parser = new pb::MessageParser<DbgProtectProcessMemoryRequest>(() => new DbgProtectProcessMemoryRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgProtectProcessMemoryRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProtectProcessMemoryRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProtectProcessMemoryRequest(DbgProtectProcessMemoryRequest other) : this() {
    address_ = other.address_;
    length_ = other.length_;
    protection_ = other.protection_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProtectProcessMemoryRequest Clone() {
    return new DbgProtectProcessMemoryRequest(this);
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 1;
  private ulong address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "length" field.</summary>
  public const int LengthFieldNumber = 2;
  private ulong length_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Length {
    get { return length_; }
    set {
      length_ = value;
    }
  }

  /// <summary>Field number for the "protection" field.</summary>
  public const int ProtectionFieldNumber = 3;
  private int protection_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Protection {
    get { return protection_; }
    set {
      protection_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgProtectProcessMemoryRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgProtectProcessMemoryRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Address != other.Address) return false;
    if (Length != other.Length) return false;
    if (Protection != other.Protection) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Address != 0UL) hash ^= Address.GetHashCode();
    if (Length != 0UL) hash ^= Length.GetHashCode();
    if (Protection != 0) hash ^= Protection.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Address != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Address);
    }
    if (Length != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Length);
    }
    if (Protection != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Protection);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Address != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
    }
    if (Length != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Length);
    }
    if (Protection != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Protection);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgProtectProcessMemoryRequest other) {
    if (other == null) {
      return;
    }
    if (other.Address != 0UL) {
      Address = other.Address;
    }
    if (other.Length != 0UL) {
      Length = other.Length;
    }
    if (other.Protection != 0) {
      Protection = other.Protection;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Address = input.ReadUInt64();
          break;
        }
        case 16: {
          Length = input.ReadUInt64();
          break;
        }
        case 24: {
          Protection = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///  TODO: Come back to this
/// </summary>
public sealed partial class DbgScanProcessMemoryRequest : pb::IMessage<DbgScanProcessMemoryRequest> {
  private static readonly pb::MessageParser<DbgScanProcessMemoryRequest> _parser = new pb::MessageParser<DbgScanProcessMemoryRequest>(() => new DbgScanProcessMemoryRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgScanProcessMemoryRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgScanProcessMemoryRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgScanProcessMemoryRequest(DbgScanProcessMemoryRequest other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgScanProcessMemoryRequest Clone() {
    return new DbgScanProcessMemoryRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgScanProcessMemoryRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgScanProcessMemoryRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgScanProcessMemoryRequest other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class DbgGetProcessInfoRequest : pb::IMessage<DbgGetProcessInfoRequest> {
  private static readonly pb::MessageParser<DbgGetProcessInfoRequest> _parser = new pb::MessageParser<DbgGetProcessInfoRequest>(() => new DbgGetProcessInfoRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetProcessInfoRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessInfoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessInfoRequest(DbgGetProcessInfoRequest other) : this() {
    processId_ = other.processId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessInfoRequest Clone() {
    return new DbgGetProcessInfoRequest(this);
  }

  /// <summary>Field number for the "processId" field.</summary>
  public const int ProcessIdFieldNumber = 1;
  private int processId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ProcessId {
    get { return processId_; }
    set {
      processId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetProcessInfoRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetProcessInfoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ProcessId != other.ProcessId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ProcessId != 0) hash ^= ProcessId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ProcessId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ProcessId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ProcessId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProcessId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetProcessInfoRequest other) {
    if (other == null) {
      return;
    }
    if (other.ProcessId != 0) {
      ProcessId = other.ProcessId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ProcessId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgAllocateProcessMemoryRequest : pb::IMessage<DbgAllocateProcessMemoryRequest> {
  private static readonly pb::MessageParser<DbgAllocateProcessMemoryRequest> _parser = new pb::MessageParser<DbgAllocateProcessMemoryRequest>(() => new DbgAllocateProcessMemoryRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgAllocateProcessMemoryRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAllocateProcessMemoryRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAllocateProcessMemoryRequest(DbgAllocateProcessMemoryRequest other) : this() {
    size_ = other.size_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAllocateProcessMemoryRequest Clone() {
    return new DbgAllocateProcessMemoryRequest(this);
  }

  /// <summary>Field number for the "size" field.</summary>
  public const int SizeFieldNumber = 1;
  private uint size_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Size {
    get { return size_; }
    set {
      size_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgAllocateProcessMemoryRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgAllocateProcessMemoryRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Size != other.Size) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Size != 0) hash ^= Size.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Size != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Size);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Size != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgAllocateProcessMemoryRequest other) {
    if (other == null) {
      return;
    }
    if (other.Size != 0) {
      Size = other.Size;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Size = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgAllocateProcessMemoryResponse : pb::IMessage<DbgAllocateProcessMemoryResponse> {
  private static readonly pb::MessageParser<DbgAllocateProcessMemoryResponse> _parser = new pb::MessageParser<DbgAllocateProcessMemoryResponse>(() => new DbgAllocateProcessMemoryResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgAllocateProcessMemoryResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAllocateProcessMemoryResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAllocateProcessMemoryResponse(DbgAllocateProcessMemoryResponse other) : this() {
    address_ = other.address_;
    size_ = other.size_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAllocateProcessMemoryResponse Clone() {
    return new DbgAllocateProcessMemoryResponse(this);
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 1;
  private ulong address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "size" field.</summary>
  public const int SizeFieldNumber = 2;
  private uint size_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Size {
    get { return size_; }
    set {
      size_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgAllocateProcessMemoryResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgAllocateProcessMemoryResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Address != other.Address) return false;
    if (Size != other.Size) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Address != 0UL) hash ^= Address.GetHashCode();
    if (Size != 0) hash ^= Size.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Address != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Address);
    }
    if (Size != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Size);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Address != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
    }
    if (Size != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgAllocateProcessMemoryResponse other) {
    if (other == null) {
      return;
    }
    if (other.Address != 0UL) {
      Address = other.Address;
    }
    if (other.Size != 0) {
      Size = other.Size;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Address = input.ReadUInt64();
          break;
        }
        case 16: {
          Size = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgFreeProcessMemoryRequest : pb::IMessage<DbgFreeProcessMemoryRequest> {
  private static readonly pb::MessageParser<DbgFreeProcessMemoryRequest> _parser = new pb::MessageParser<DbgFreeProcessMemoryRequest>(() => new DbgFreeProcessMemoryRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgFreeProcessMemoryRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFreeProcessMemoryRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFreeProcessMemoryRequest(DbgFreeProcessMemoryRequest other) : this() {
    address_ = other.address_;
    size_ = other.size_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFreeProcessMemoryRequest Clone() {
    return new DbgFreeProcessMemoryRequest(this);
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 1;
  private ulong address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "size" field.</summary>
  public const int SizeFieldNumber = 2;
  private uint size_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Size {
    get { return size_; }
    set {
      size_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgFreeProcessMemoryRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgFreeProcessMemoryRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Address != other.Address) return false;
    if (Size != other.Size) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Address != 0UL) hash ^= Address.GetHashCode();
    if (Size != 0) hash ^= Size.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Address != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Address);
    }
    if (Size != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Size);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Address != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
    }
    if (Size != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgFreeProcessMemoryRequest other) {
    if (other == null) {
      return;
    }
    if (other.Address != 0UL) {
      Address = other.Address;
    }
    if (other.Size != 0) {
      Size = other.Size;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Address = input.ReadUInt64();
          break;
        }
        case 16: {
          Size = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgGetProcessMapsRequest : pb::IMessage<DbgGetProcessMapsRequest> {
  private static readonly pb::MessageParser<DbgGetProcessMapsRequest> _parser = new pb::MessageParser<DbgGetProcessMapsRequest>(() => new DbgGetProcessMapsRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetProcessMapsRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessMapsRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessMapsRequest(DbgGetProcessMapsRequest other) : this() {
    processId_ = other.processId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessMapsRequest Clone() {
    return new DbgGetProcessMapsRequest(this);
  }

  /// <summary>Field number for the "processId" field.</summary>
  public const int ProcessIdFieldNumber = 1;
  private int processId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ProcessId {
    get { return processId_; }
    set {
      processId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetProcessMapsRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetProcessMapsRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ProcessId != other.ProcessId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ProcessId != 0) hash ^= ProcessId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ProcessId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ProcessId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ProcessId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProcessId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetProcessMapsRequest other) {
    if (other == null) {
      return;
    }
    if (other.ProcessId != 0) {
      ProcessId = other.ProcessId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ProcessId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgAttachRequest : pb::IMessage<DbgAttachRequest> {
  private static readonly pb::MessageParser<DbgAttachRequest> _parser = new pb::MessageParser<DbgAttachRequest>(() => new DbgAttachRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgAttachRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAttachRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAttachRequest(DbgAttachRequest other) : this() {
    processId_ = other.processId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAttachRequest Clone() {
    return new DbgAttachRequest(this);
  }

  /// <summary>Field number for the "processId" field.</summary>
  public const int ProcessIdFieldNumber = 1;
  private int processId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ProcessId {
    get { return processId_; }
    set {
      processId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgAttachRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgAttachRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ProcessId != other.ProcessId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ProcessId != 0) hash ^= ProcessId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ProcessId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ProcessId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ProcessId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProcessId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgAttachRequest other) {
    if (other == null) {
      return;
    }
    if (other.ProcessId != 0) {
      ProcessId = other.ProcessId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ProcessId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgDetachRequest : pb::IMessage<DbgDetachRequest> {
  private static readonly pb::MessageParser<DbgDetachRequest> _parser = new pb::MessageParser<DbgDetachRequest>(() => new DbgDetachRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgDetachRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgDetachRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgDetachRequest(DbgDetachRequest other) : this() {
    force_ = other.force_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgDetachRequest Clone() {
    return new DbgDetachRequest(this);
  }

  /// <summary>Field number for the "force" field.</summary>
  public const int ForceFieldNumber = 1;
  private bool force_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Force {
    get { return force_; }
    set {
      force_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgDetachRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgDetachRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Force != other.Force) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Force != false) hash ^= Force.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Force != false) {
      output.WriteRawTag(8);
      output.WriteBool(Force);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Force != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgDetachRequest other) {
    if (other == null) {
      return;
    }
    if (other.Force != false) {
      Force = other.Force;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Force = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgBreakpointRequest : pb::IMessage<DbgBreakpointRequest> {
  private static readonly pb::MessageParser<DbgBreakpointRequest> _parser = new pb::MessageParser<DbgBreakpointRequest>(() => new DbgBreakpointRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgBreakpointRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgBreakpointRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgBreakpointRequest(DbgBreakpointRequest other) : this() {
    enabled_ = other.enabled_;
    address_ = other.address_;
    original_ = other.original_;
    breakpointType_ = other.breakpointType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgBreakpointRequest Clone() {
    return new DbgBreakpointRequest(this);
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 1;
  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { return enabled_; }
    set {
      enabled_ = value;
    }
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 2;
  private ulong address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "original" field.</summary>
  public const int OriginalFieldNumber = 3;
  private uint original_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Original {
    get { return original_; }
    set {
      original_ = value;
    }
  }

  /// <summary>Field number for the "breakpointType" field.</summary>
  public const int BreakpointTypeFieldNumber = 4;
  private global::DbgBreakpointType breakpointType_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgBreakpointType BreakpointType {
    get { return breakpointType_; }
    set {
      breakpointType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgBreakpointRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgBreakpointRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enabled != other.Enabled) return false;
    if (Address != other.Address) return false;
    if (Original != other.Original) return false;
    if (BreakpointType != other.BreakpointType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enabled != false) hash ^= Enabled.GetHashCode();
    if (Address != 0UL) hash ^= Address.GetHashCode();
    if (Original != 0) hash ^= Original.GetHashCode();
    if (BreakpointType != 0) hash ^= BreakpointType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enabled != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enabled);
    }
    if (Address != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Address);
    }
    if (Original != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Original);
    }
    if (BreakpointType != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) BreakpointType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enabled != false) {
      size += 1 + 1;
    }
    if (Address != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
    }
    if (Original != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Original);
    }
    if (BreakpointType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BreakpointType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgBreakpointRequest other) {
    if (other == null) {
      return;
    }
    if (other.Enabled != false) {
      Enabled = other.Enabled;
    }
    if (other.Address != 0UL) {
      Address = other.Address;
    }
    if (other.Original != 0) {
      Original = other.Original;
    }
    if (other.BreakpointType != 0) {
      BreakpointType = other.BreakpointType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Enabled = input.ReadBool();
          break;
        }
        case 16: {
          Address = input.ReadUInt64();
          break;
        }
        case 24: {
          Original = input.ReadUInt32();
          break;
        }
        case 32: {
          breakpointType_ = (global::DbgBreakpointType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgBreakpointResponse : pb::IMessage<DbgBreakpointResponse> {
  private static readonly pb::MessageParser<DbgBreakpointResponse> _parser = new pb::MessageParser<DbgBreakpointResponse>(() => new DbgBreakpointResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgBreakpointResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgBreakpointResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgBreakpointResponse(DbgBreakpointResponse other) : this() {
    breakpointHandle_ = other.breakpointHandle_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgBreakpointResponse Clone() {
    return new DbgBreakpointResponse(this);
  }

  /// <summary>Field number for the "breakpointHandle" field.</summary>
  public const int BreakpointHandleFieldNumber = 1;
  private ulong breakpointHandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong BreakpointHandle {
    get { return breakpointHandle_; }
    set {
      breakpointHandle_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgBreakpointResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgBreakpointResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BreakpointHandle != other.BreakpointHandle) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BreakpointHandle != 0UL) hash ^= BreakpointHandle.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BreakpointHandle != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(BreakpointHandle);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BreakpointHandle != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BreakpointHandle);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgBreakpointResponse other) {
    if (other == null) {
      return;
    }
    if (other.BreakpointHandle != 0UL) {
      BreakpointHandle = other.BreakpointHandle;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BreakpointHandle = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgWatchpointRequest : pb::IMessage<DbgWatchpointRequest> {
  private static readonly pb::MessageParser<DbgWatchpointRequest> _parser = new pb::MessageParser<DbgWatchpointRequest>(() => new DbgWatchpointRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgWatchpointRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWatchpointRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWatchpointRequest(DbgWatchpointRequest other) : this() {
    enabled_ = other.enabled_;
    address_ = other.address_;
    breakpointType_ = other.breakpointType_;
    length_ = other.length_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWatchpointRequest Clone() {
    return new DbgWatchpointRequest(this);
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 1;
  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { return enabled_; }
    set {
      enabled_ = value;
    }
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 2;
  private ulong address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "breakpointType" field.</summary>
  public const int BreakpointTypeFieldNumber = 3;
  private uint breakpointType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BreakpointType {
    get { return breakpointType_; }
    set {
      breakpointType_ = value;
    }
  }

  /// <summary>Field number for the "length" field.</summary>
  public const int LengthFieldNumber = 4;
  private uint length_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Length {
    get { return length_; }
    set {
      length_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgWatchpointRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgWatchpointRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enabled != other.Enabled) return false;
    if (Address != other.Address) return false;
    if (BreakpointType != other.BreakpointType) return false;
    if (Length != other.Length) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enabled != false) hash ^= Enabled.GetHashCode();
    if (Address != 0UL) hash ^= Address.GetHashCode();
    if (BreakpointType != 0) hash ^= BreakpointType.GetHashCode();
    if (Length != 0) hash ^= Length.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enabled != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enabled);
    }
    if (Address != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Address);
    }
    if (BreakpointType != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(BreakpointType);
    }
    if (Length != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Length);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enabled != false) {
      size += 1 + 1;
    }
    if (Address != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
    }
    if (BreakpointType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BreakpointType);
    }
    if (Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Length);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgWatchpointRequest other) {
    if (other == null) {
      return;
    }
    if (other.Enabled != false) {
      Enabled = other.Enabled;
    }
    if (other.Address != 0UL) {
      Address = other.Address;
    }
    if (other.BreakpointType != 0) {
      BreakpointType = other.BreakpointType;
    }
    if (other.Length != 0) {
      Length = other.Length;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Enabled = input.ReadBool();
          break;
        }
        case 16: {
          Address = input.ReadUInt64();
          break;
        }
        case 24: {
          BreakpointType = input.ReadUInt32();
          break;
        }
        case 32: {
          Length = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgWatchpointResponse : pb::IMessage<DbgWatchpointResponse> {
  private static readonly pb::MessageParser<DbgWatchpointResponse> _parser = new pb::MessageParser<DbgWatchpointResponse>(() => new DbgWatchpointResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgWatchpointResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWatchpointResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWatchpointResponse(DbgWatchpointResponse other) : this() {
    watchpointHandle_ = other.watchpointHandle_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWatchpointResponse Clone() {
    return new DbgWatchpointResponse(this);
  }

  /// <summary>Field number for the "watchpointHandle" field.</summary>
  public const int WatchpointHandleFieldNumber = 1;
  private ulong watchpointHandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong WatchpointHandle {
    get { return watchpointHandle_; }
    set {
      watchpointHandle_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgWatchpointResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgWatchpointResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (WatchpointHandle != other.WatchpointHandle) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (WatchpointHandle != 0UL) hash ^= WatchpointHandle.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (WatchpointHandle != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(WatchpointHandle);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (WatchpointHandle != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WatchpointHandle);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgWatchpointResponse other) {
    if (other == null) {
      return;
    }
    if (other.WatchpointHandle != 0UL) {
      WatchpointHandle = other.WatchpointHandle;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          WatchpointHandle = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgGetProcessThreadsRequest : pb::IMessage<DbgGetProcessThreadsRequest> {
  private static readonly pb::MessageParser<DbgGetProcessThreadsRequest> _parser = new pb::MessageParser<DbgGetProcessThreadsRequest>(() => new DbgGetProcessThreadsRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetProcessThreadsRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessThreadsRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessThreadsRequest(DbgGetProcessThreadsRequest other) : this() {
    processId_ = other.processId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessThreadsRequest Clone() {
    return new DbgGetProcessThreadsRequest(this);
  }

  /// <summary>Field number for the "processId" field.</summary>
  public const int ProcessIdFieldNumber = 1;
  private int processId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ProcessId {
    get { return processId_; }
    set {
      processId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetProcessThreadsRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetProcessThreadsRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ProcessId != other.ProcessId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ProcessId != 0) hash ^= ProcessId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ProcessId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ProcessId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ProcessId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProcessId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetProcessThreadsRequest other) {
    if (other == null) {
      return;
    }
    if (other.ProcessId != 0) {
      ProcessId = other.ProcessId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ProcessId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgGetProcessThreadsResponse : pb::IMessage<DbgGetProcessThreadsResponse> {
  private static readonly pb::MessageParser<DbgGetProcessThreadsResponse> _parser = new pb::MessageParser<DbgGetProcessThreadsResponse>(() => new DbgGetProcessThreadsResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetProcessThreadsResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessThreadsResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessThreadsResponse(DbgGetProcessThreadsResponse other) : this() {
    threads_ = other.threads_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessThreadsResponse Clone() {
    return new DbgGetProcessThreadsResponse(this);
  }

  /// <summary>Field number for the "threads" field.</summary>
  public const int ThreadsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DbgThreadLimited> _repeated_threads_codec
      = pb::FieldCodec.ForMessage(10, global::DbgThreadLimited.Parser);
  private readonly pbc::RepeatedField<global::DbgThreadLimited> threads_ = new pbc::RepeatedField<global::DbgThreadLimited>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DbgThreadLimited> Threads {
    get { return threads_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetProcessThreadsResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetProcessThreadsResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!threads_.Equals(other.threads_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= threads_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    threads_.WriteTo(output, _repeated_threads_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += threads_.CalculateSize(_repeated_threads_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetProcessThreadsResponse other) {
    if (other == null) {
      return;
    }
    threads_.Add(other.threads_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          threads_.AddEntriesFrom(input, _repeated_threads_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DbgSignalProcessRequest : pb::IMessage<DbgSignalProcessRequest> {
  private static readonly pb::MessageParser<DbgSignalProcessRequest> _parser = new pb::MessageParser<DbgSignalProcessRequest>(() => new DbgSignalProcessRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgSignalProcessRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgSignalProcessRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgSignalProcessRequest(DbgSignalProcessRequest other) : this() {
    signal_ = other.signal_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgSignalProcessRequest Clone() {
    return new DbgSignalProcessRequest(this);
  }

  /// <summary>Field number for the "signal" field.</summary>
  public const int SignalFieldNumber = 1;
  private int signal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Signal {
    get { return signal_; }
    set {
      signal_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgSignalProcessRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgSignalProcessRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Signal != other.Signal) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Signal != 0) hash ^= Signal.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Signal != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Signal);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Signal != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Signal);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgSignalProcessRequest other) {
    if (other == null) {
      return;
    }
    if (other.Signal != 0) {
      Signal = other.Signal;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Signal = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgGetRegistersRequest : pb::IMessage<DbgGetRegistersRequest> {
  private static readonly pb::MessageParser<DbgGetRegistersRequest> _parser = new pb::MessageParser<DbgGetRegistersRequest>(() => new DbgGetRegistersRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetRegistersRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetRegistersRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetRegistersRequest(DbgGetRegistersRequest other) : this() {
    threadId_ = other.threadId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetRegistersRequest Clone() {
    return new DbgGetRegistersRequest(this);
  }

  /// <summary>Field number for the "threadId" field.</summary>
  public const int ThreadIdFieldNumber = 1;
  private int threadId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ThreadId {
    get { return threadId_; }
    set {
      threadId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetRegistersRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetRegistersRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ThreadId != other.ThreadId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ThreadId != 0) hash ^= ThreadId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ThreadId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ThreadId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ThreadId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreadId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetRegistersRequest other) {
    if (other == null) {
      return;
    }
    if (other.ThreadId != 0) {
      ThreadId = other.ThreadId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ThreadId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgGetRegistersResponse : pb::IMessage<DbgGetRegistersResponse> {
  private static readonly pb::MessageParser<DbgGetRegistersResponse> _parser = new pb::MessageParser<DbgGetRegistersResponse>(() => new DbgGetRegistersResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetRegistersResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetRegistersResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetRegistersResponse(DbgGetRegistersResponse other) : this() {
    GpRegisters = other.gpRegisters_ != null ? other.GpRegisters.Clone() : null;
    FpRegisters = other.fpRegisters_ != null ? other.FpRegisters.Clone() : null;
    DbRegisters = other.dbRegisters_ != null ? other.DbRegisters.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetRegistersResponse Clone() {
    return new DbgGetRegistersResponse(this);
  }

  /// <summary>Field number for the "gpRegisters" field.</summary>
  public const int GpRegistersFieldNumber = 1;
  private global::DbgGpRegisters gpRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgGpRegisters GpRegisters {
    get { return gpRegisters_; }
    set {
      gpRegisters_ = value;
    }
  }

  /// <summary>Field number for the "fpRegisters" field.</summary>
  public const int FpRegistersFieldNumber = 2;
  private global::DbgFpRegisters fpRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgFpRegisters FpRegisters {
    get { return fpRegisters_; }
    set {
      fpRegisters_ = value;
    }
  }

  /// <summary>Field number for the "dbRegisters" field.</summary>
  public const int DbRegistersFieldNumber = 3;
  private global::DbgDbRegisters dbRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgDbRegisters DbRegisters {
    get { return dbRegisters_; }
    set {
      dbRegisters_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetRegistersResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetRegistersResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(GpRegisters, other.GpRegisters)) return false;
    if (!object.Equals(FpRegisters, other.FpRegisters)) return false;
    if (!object.Equals(DbRegisters, other.DbRegisters)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (gpRegisters_ != null) hash ^= GpRegisters.GetHashCode();
    if (fpRegisters_ != null) hash ^= FpRegisters.GetHashCode();
    if (dbRegisters_ != null) hash ^= DbRegisters.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (gpRegisters_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(GpRegisters);
    }
    if (fpRegisters_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(FpRegisters);
    }
    if (dbRegisters_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DbRegisters);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (gpRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GpRegisters);
    }
    if (fpRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FpRegisters);
    }
    if (dbRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DbRegisters);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetRegistersResponse other) {
    if (other == null) {
      return;
    }
    if (other.gpRegisters_ != null) {
      if (gpRegisters_ == null) {
        gpRegisters_ = new global::DbgGpRegisters();
      }
      GpRegisters.MergeFrom(other.GpRegisters);
    }
    if (other.fpRegisters_ != null) {
      if (fpRegisters_ == null) {
        fpRegisters_ = new global::DbgFpRegisters();
      }
      FpRegisters.MergeFrom(other.FpRegisters);
    }
    if (other.dbRegisters_ != null) {
      if (dbRegisters_ == null) {
        dbRegisters_ = new global::DbgDbRegisters();
      }
      DbRegisters.MergeFrom(other.DbRegisters);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (gpRegisters_ == null) {
            gpRegisters_ = new global::DbgGpRegisters();
          }
          input.ReadMessage(gpRegisters_);
          break;
        }
        case 18: {
          if (fpRegisters_ == null) {
            fpRegisters_ = new global::DbgFpRegisters();
          }
          input.ReadMessage(fpRegisters_);
          break;
        }
        case 26: {
          if (dbRegisters_ == null) {
            dbRegisters_ = new global::DbgDbRegisters();
          }
          input.ReadMessage(dbRegisters_);
          break;
        }
      }
    }
  }

}

public sealed partial class DbgSetRegistersRequest : pb::IMessage<DbgSetRegistersRequest> {
  private static readonly pb::MessageParser<DbgSetRegistersRequest> _parser = new pb::MessageParser<DbgSetRegistersRequest>(() => new DbgSetRegistersRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgSetRegistersRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgSetRegistersRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgSetRegistersRequest(DbgSetRegistersRequest other) : this() {
    threadId_ = other.threadId_;
    GpRegisters = other.gpRegisters_ != null ? other.GpRegisters.Clone() : null;
    FpRegisters = other.fpRegisters_ != null ? other.FpRegisters.Clone() : null;
    DbRegisters = other.dbRegisters_ != null ? other.DbRegisters.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgSetRegistersRequest Clone() {
    return new DbgSetRegistersRequest(this);
  }

  /// <summary>Field number for the "threadId" field.</summary>
  public const int ThreadIdFieldNumber = 1;
  private int threadId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ThreadId {
    get { return threadId_; }
    set {
      threadId_ = value;
    }
  }

  /// <summary>Field number for the "gpRegisters" field.</summary>
  public const int GpRegistersFieldNumber = 2;
  private global::DbgGpRegisters gpRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgGpRegisters GpRegisters {
    get { return gpRegisters_; }
    set {
      gpRegisters_ = value;
    }
  }

  /// <summary>Field number for the "fpRegisters" field.</summary>
  public const int FpRegistersFieldNumber = 3;
  private global::DbgFpRegisters fpRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgFpRegisters FpRegisters {
    get { return fpRegisters_; }
    set {
      fpRegisters_ = value;
    }
  }

  /// <summary>Field number for the "dbRegisters" field.</summary>
  public const int DbRegistersFieldNumber = 4;
  private global::DbgDbRegisters dbRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgDbRegisters DbRegisters {
    get { return dbRegisters_; }
    set {
      dbRegisters_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgSetRegistersRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgSetRegistersRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ThreadId != other.ThreadId) return false;
    if (!object.Equals(GpRegisters, other.GpRegisters)) return false;
    if (!object.Equals(FpRegisters, other.FpRegisters)) return false;
    if (!object.Equals(DbRegisters, other.DbRegisters)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ThreadId != 0) hash ^= ThreadId.GetHashCode();
    if (gpRegisters_ != null) hash ^= GpRegisters.GetHashCode();
    if (fpRegisters_ != null) hash ^= FpRegisters.GetHashCode();
    if (dbRegisters_ != null) hash ^= DbRegisters.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ThreadId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ThreadId);
    }
    if (gpRegisters_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(GpRegisters);
    }
    if (fpRegisters_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(FpRegisters);
    }
    if (dbRegisters_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(DbRegisters);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ThreadId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreadId);
    }
    if (gpRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GpRegisters);
    }
    if (fpRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FpRegisters);
    }
    if (dbRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DbRegisters);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgSetRegistersRequest other) {
    if (other == null) {
      return;
    }
    if (other.ThreadId != 0) {
      ThreadId = other.ThreadId;
    }
    if (other.gpRegisters_ != null) {
      if (gpRegisters_ == null) {
        gpRegisters_ = new global::DbgGpRegisters();
      }
      GpRegisters.MergeFrom(other.GpRegisters);
    }
    if (other.fpRegisters_ != null) {
      if (fpRegisters_ == null) {
        fpRegisters_ = new global::DbgFpRegisters();
      }
      FpRegisters.MergeFrom(other.FpRegisters);
    }
    if (other.dbRegisters_ != null) {
      if (dbRegisters_ == null) {
        dbRegisters_ = new global::DbgDbRegisters();
      }
      DbRegisters.MergeFrom(other.DbRegisters);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ThreadId = input.ReadInt32();
          break;
        }
        case 18: {
          if (gpRegisters_ == null) {
            gpRegisters_ = new global::DbgGpRegisters();
          }
          input.ReadMessage(gpRegisters_);
          break;
        }
        case 26: {
          if (fpRegisters_ == null) {
            fpRegisters_ = new global::DbgFpRegisters();
          }
          input.ReadMessage(fpRegisters_);
          break;
        }
        case 34: {
          if (dbRegisters_ == null) {
            dbRegisters_ = new global::DbgDbRegisters();
          }
          input.ReadMessage(dbRegisters_);
          break;
        }
      }
    }
  }

}

public sealed partial class DbgGetThreadInfoRequest : pb::IMessage<DbgGetThreadInfoRequest> {
  private static readonly pb::MessageParser<DbgGetThreadInfoRequest> _parser = new pb::MessageParser<DbgGetThreadInfoRequest>(() => new DbgGetThreadInfoRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetThreadInfoRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetThreadInfoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetThreadInfoRequest(DbgGetThreadInfoRequest other) : this() {
    threadId_ = other.threadId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetThreadInfoRequest Clone() {
    return new DbgGetThreadInfoRequest(this);
  }

  /// <summary>Field number for the "threadId" field.</summary>
  public const int ThreadIdFieldNumber = 1;
  private int threadId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ThreadId {
    get { return threadId_; }
    set {
      threadId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetThreadInfoRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetThreadInfoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ThreadId != other.ThreadId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ThreadId != 0) hash ^= ThreadId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ThreadId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ThreadId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ThreadId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreadId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetThreadInfoRequest other) {
    if (other == null) {
      return;
    }
    if (other.ThreadId != 0) {
      ThreadId = other.ThreadId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ThreadId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgGetKernelInfoResponse : pb::IMessage<DbgGetKernelInfoResponse> {
  private static readonly pb::MessageParser<DbgGetKernelInfoResponse> _parser = new pb::MessageParser<DbgGetKernelInfoResponse>(() => new DbgGetKernelInfoResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetKernelInfoResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetKernelInfoResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetKernelInfoResponse(DbgGetKernelInfoResponse other) : this() {
    version_ = other.version_;
    gloablConfigData_ = other.gloablConfigData_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetKernelInfoResponse Clone() {
    return new DbgGetKernelInfoResponse(this);
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 1;
  private ulong version_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Version {
    get { return version_; }
    set {
      version_ = value;
    }
  }

  /// <summary>Field number for the "gloablConfigData" field.</summary>
  public const int GloablConfigDataFieldNumber = 2;
  private pb::ByteString gloablConfigData_ = pb::ByteString.Empty;
  /// <summary>
  ///  len 140?
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString GloablConfigData {
    get { return gloablConfigData_; }
    set {
      gloablConfigData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetKernelInfoResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetKernelInfoResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Version != other.Version) return false;
    if (GloablConfigData != other.GloablConfigData) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Version != 0UL) hash ^= Version.GetHashCode();
    if (GloablConfigData.Length != 0) hash ^= GloablConfigData.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Version != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Version);
    }
    if (GloablConfigData.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(GloablConfigData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Version != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
    }
    if (GloablConfigData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(GloablConfigData);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetKernelInfoResponse other) {
    if (other == null) {
      return;
    }
    if (other.Version != 0UL) {
      Version = other.Version;
    }
    if (other.GloablConfigData.Length != 0) {
      GloablConfigData = other.GloablConfigData;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Version = input.ReadUInt64();
          break;
        }
        case 18: {
          GloablConfigData = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgReadKernelMemoryRequest : pb::IMessage<DbgReadKernelMemoryRequest> {
  private static readonly pb::MessageParser<DbgReadKernelMemoryRequest> _parser = new pb::MessageParser<DbgReadKernelMemoryRequest>(() => new DbgReadKernelMemoryRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgReadKernelMemoryRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadKernelMemoryRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadKernelMemoryRequest(DbgReadKernelMemoryRequest other) : this() {
    address_ = other.address_;
    size_ = other.size_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadKernelMemoryRequest Clone() {
    return new DbgReadKernelMemoryRequest(this);
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 1;
  private ulong address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "size" field.</summary>
  public const int SizeFieldNumber = 2;
  private ulong size_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Size {
    get { return size_; }
    set {
      size_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgReadKernelMemoryRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgReadKernelMemoryRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Address != other.Address) return false;
    if (Size != other.Size) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Address != 0UL) hash ^= Address.GetHashCode();
    if (Size != 0UL) hash ^= Size.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Address != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Address);
    }
    if (Size != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Size);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Address != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
    }
    if (Size != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Size);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgReadKernelMemoryRequest other) {
    if (other == null) {
      return;
    }
    if (other.Address != 0UL) {
      Address = other.Address;
    }
    if (other.Size != 0UL) {
      Size = other.Size;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Address = input.ReadUInt64();
          break;
        }
        case 16: {
          Size = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgReadKernelMemoryResponse : pb::IMessage<DbgReadKernelMemoryResponse> {
  private static readonly pb::MessageParser<DbgReadKernelMemoryResponse> _parser = new pb::MessageParser<DbgReadKernelMemoryResponse>(() => new DbgReadKernelMemoryResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgReadKernelMemoryResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadKernelMemoryResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadKernelMemoryResponse(DbgReadKernelMemoryResponse other) : this() {
    data_ = other.data_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadKernelMemoryResponse Clone() {
    return new DbgReadKernelMemoryResponse(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgReadKernelMemoryResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgReadKernelMemoryResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Data != other.Data) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Data.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Data);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgReadKernelMemoryResponse other) {
    if (other == null) {
      return;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgWriteKernelMemoryRequest : pb::IMessage<DbgWriteKernelMemoryRequest> {
  private static readonly pb::MessageParser<DbgWriteKernelMemoryRequest> _parser = new pb::MessageParser<DbgWriteKernelMemoryRequest>(() => new DbgWriteKernelMemoryRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgWriteKernelMemoryRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWriteKernelMemoryRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWriteKernelMemoryRequest(DbgWriteKernelMemoryRequest other) : this() {
    address_ = other.address_;
    data_ = other.data_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWriteKernelMemoryRequest Clone() {
    return new DbgWriteKernelMemoryRequest(this);
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 1;
  private ulong address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 2;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgWriteKernelMemoryRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgWriteKernelMemoryRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Address != other.Address) return false;
    if (Data != other.Data) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Address != 0UL) hash ^= Address.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Address != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Address);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Data);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Address != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgWriteKernelMemoryRequest other) {
    if (other == null) {
      return;
    }
    if (other.Address != 0UL) {
      Address = other.Address;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Address = input.ReadUInt64();
          break;
        }
        case 18: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgCommandRequest : pb::IMessage<DbgCommandRequest> {
  private static readonly pb::MessageParser<DbgCommandRequest> _parser = new pb::MessageParser<DbgCommandRequest>(() => new DbgCommandRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgCommandRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgCommandRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgCommandRequest(DbgCommandRequest other) : this() {
    command_ = other.command_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgCommandRequest Clone() {
    return new DbgCommandRequest(this);
  }

  /// <summary>Field number for the "command" field.</summary>
  public const int CommandFieldNumber = 1;
  private global::DbgCommandRequest.Types.DbgCommands command_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgCommandRequest.Types.DbgCommands Command {
    get { return command_; }
    set {
      command_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgCommandRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgCommandRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Command != other.Command) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Command != 0) hash ^= Command.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Command != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Command);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Command != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgCommandRequest other) {
    if (other == null) {
      return;
    }
    if (other.Command != 0) {
      Command = other.Command;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          command_ = (global::DbgCommandRequest.Types.DbgCommands) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the DbgCommandRequest message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum DbgCommands {
      [pbr::OriginalName("DBG_NONE")] DbgNone = 0,
      [pbr::OriginalName("DBG_REBOOT")] DbgReboot = 1,
      [pbr::OriginalName("DBG_SHUTDOWN")] DbgShutdown = 2,
      [pbr::OriginalName("DBG_PRINT")] DbgPrint = 3,
      [pbr::OriginalName("DBG_NOTIFY")] DbgNotify = 4,
      [pbr::OriginalName("DBG_INFO")] DbgInfo = 5,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: external/filemanager.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from external/filemanager.proto</summary>
public static partial class FilemanagerReflection {

  #region Descriptor
  /// <summary>File descriptor for external/filemanager.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static FilemanagerReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChpleHRlcm5hbC9maWxlbWFuYWdlci5wcm90byIgCg1GbUVjaG9SZXF1ZXN0",
          "Eg8KB21lc3NhZ2UYASABKAkiOgoNRm1PcGVuUmVxdWVzdBINCgVmbGFncxgB",
          "IAEoBRIMCgRtb2RlGAIgASgFEgwKBHBhdGgYAyABKAkiIAoORm1DbG9zZVJl",
          "cXVlc3QSDgoGaGFuZGxlGAEgASgFIi8KDUZtU2Vla1JlcXVlc3QSDgoGaGFu",
          "ZGxlGAEgASgFEg4KBm9mZnNldBgCIAEoAyItCg1GbVJlYWRSZXF1ZXN0Eg4K",
          "BmhhbmRsZRgBIAEoBRIMCgRzaXplGAIgASgEIh4KDkZtUmVhZFJlc3BvbnNl",
          "EgwKBGRhdGEYASABKAwiLgoORm1Xcml0ZVJlcXVlc3QSDgoGaGFuZGxlGAEg",
          "ASgFEgwKBGRhdGEYAiABKAwiRAoGRm1EZW50Eg4KBmZpbGVubxgBIAEoDRIO",
          "CgZyZWNMZW4YAiABKA0SDAoEdHlwZRgDIAEoDRIMCgRuYW1lGAQgASgJIiEK",
          "EUZtR2V0RGVudHNSZXF1ZXN0EgwKBHBhdGgYASABKAkiLAoSRm1HZXREZW50",
          "c1Jlc3BvbnNlEhYKBWRlbnRzGAEgAygLMgcuRm1EZW50Ii0KCkZtVGltZXNw",
          "ZWMSDgoGdHZfc2VjGAEgASgDEg8KB3R2X25zZWMYAiABKAUiLQoNRm1TdGF0",
          "UmVxdWVzdBIOCgZoYW5kbGUYASABKAUSDAoEcGF0aBgCIAEoCSLtAgoORm1T",
          "dGF0UmVzcG9uc2USDgoGc3RfZGV2GAEgASgNEg4KBnN0X2lubxgCIAEoDRIP",
          "CgdzdF9tb2RlGAMgASgNEhAKCHN0X25saW5rGAQgASgNEg4KBnN0X3VpZBgF",
          "IAEoDRIOCgZzdF9naWQYBiABKA0SDwoHc3RfcmRldhgHIAEoDRIcCgdzdF9h",
          "dGltGAggASgLMgsuRm1UaW1lc3BlYxIcCgdzdF9tdGltGAkgASgLMgsuRm1U",
          "aW1lc3BlYxIcCgdzdF9jdGltGAogASgLMgsuRm1UaW1lc3BlYxIPCgdzdF9z",
          "aXplGAsgASgDEhEKCXN0X2Jsb2NrcxgMIAEoAxISCgpzdF9ibGtzaXplGA0g",
          "ASgNEhAKCHN0X2ZsYWdzGA4gASgNEg4KBnN0X2dlbhgPIAEoDRIRCglzdF9s",
          "c3BhcmUYECABKAUSIAoLc3RfYmlydGh0aW0YESABKAsyCy5GbVRpbWVzcGVj",
          "IiwKDkZtTWtkaXJSZXF1ZXN0EgwKBG1vZGUYASABKAUSDAoEcGF0aBgCIAEo",
          "CSIeCg5GbVJtZGlyUmVxdWVzdBIMCgRwYXRoGAEgASgJIh8KD0ZtVW5saW5r",
          "UmVxdWVzdBIMCgRwYXRoGAEgASgJIiQKFEZtRGVjcnlwdFNlbGZSZXF1ZXN0",
          "EgwKBHBhdGgYASABKAkiJQoVRm1EZWNyeXB0U2VsZlJlc3BvbnNlEgwKBGRh",
          "dGEYASABKAxiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::FmEchoRequest), global::FmEchoRequest.Parser, new[]{ "Message" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FmOpenRequest), global::FmOpenRequest.Parser, new[]{ "Flags", "Mode", "Path" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FmCloseRequest), global::FmCloseRequest.Parser, new[]{ "Handle" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FmSeekRequest), global::FmSeekRequest.Parser, new[]{ "Handle", "Offset" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FmReadRequest), global::FmReadRequest.Parser, new[]{ "Handle", "Size" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FmReadResponse), global::FmReadResponse.Parser, new[]{ "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FmWriteRequest), global::FmWriteRequest.Parser, new[]{ "Handle", "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FmDent), global::FmDent.Parser, new[]{ "Fileno", "RecLen", "Type", "Name" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FmGetDentsRequest), global::FmGetDentsRequest.Parser, new[]{ "Path" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FmGetDentsResponse), global::FmGetDentsResponse.Parser, new[]{ "Dents" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FmTimespec), global::FmTimespec.Parser, new[]{ "TvSec", "TvNsec" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FmStatRequest), global::FmStatRequest.Parser, new[]{ "Handle", "Path" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FmStatResponse), global::FmStatResponse.Parser, new[]{ "StDev", "StIno", "StMode", "StNlink", "StUid", "StGid", "StRdev", "StAtim", "StMtim", "StCtim", "StSize", "StBlocks", "StBlksize", "StFlags", "StGen", "StLspare", "StBirthtim" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FmMkdirRequest), global::FmMkdirRequest.Parser, new[]{ "Mode", "Path" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FmRmdirRequest), global::FmRmdirRequest.Parser, new[]{ "Path" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FmUnlinkRequest), global::FmUnlinkRequest.Parser, new[]{ "Path" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FmDecryptSelfRequest), global::FmDecryptSelfRequest.Parser, new[]{ "Path" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FmDecryptSelfResponse), global::FmDecryptSelfResponse.Parser, new[]{ "Data" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class FmEchoRequest : pb::IMessage<FmEchoRequest> {
  private static readonly pb::MessageParser<FmEchoRequest> _parser = new pb::MessageParser<FmEchoRequest>(() => new FmEchoRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmEchoRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmEchoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmEchoRequest(FmEchoRequest other) : this() {
    message_ = other.message_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmEchoRequest Clone() {
    return new FmEchoRequest(this);
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 1;
  private string message_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmEchoRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmEchoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Message != other.Message) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Message.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Message);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Message.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmEchoRequest other) {
    if (other == null) {
      return;
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Message = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class FmOpenRequest : pb::IMessage<FmOpenRequest> {
  private static readonly pb::MessageParser<FmOpenRequest> _parser = new pb::MessageParser<FmOpenRequest>(() => new FmOpenRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmOpenRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmOpenRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmOpenRequest(FmOpenRequest other) : this() {
    flags_ = other.flags_;
    mode_ = other.mode_;
    path_ = other.path_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmOpenRequest Clone() {
    return new FmOpenRequest(this);
  }

  /// <summary>Field number for the "flags" field.</summary>
  public const int FlagsFieldNumber = 1;
  private int flags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Flags {
    get { return flags_; }
    set {
      flags_ = value;
    }
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 2;
  private int mode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  /// <summary>Field number for the "path" field.</summary>
  public const int PathFieldNumber = 3;
  private string path_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Path {
    get { return path_; }
    set {
      path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmOpenRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmOpenRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Flags != other.Flags) return false;
    if (Mode != other.Mode) return false;
    if (Path != other.Path) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Flags != 0) hash ^= Flags.GetHashCode();
    if (Mode != 0) hash ^= Mode.GetHashCode();
    if (Path.Length != 0) hash ^= Path.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Flags != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Flags);
    }
    if (Mode != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Mode);
    }
    if (Path.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Path);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Flags != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
    }
    if (Mode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
    }
    if (Path.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmOpenRequest other) {
    if (other == null) {
      return;
    }
    if (other.Flags != 0) {
      Flags = other.Flags;
    }
    if (other.Mode != 0) {
      Mode = other.Mode;
    }
    if (other.Path.Length != 0) {
      Path = other.Path;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Flags = input.ReadInt32();
          break;
        }
        case 16: {
          Mode = input.ReadInt32();
          break;
        }
        case 26: {
          Path = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class FmCloseRequest : pb::IMessage<FmCloseRequest> {
  private static readonly pb::MessageParser<FmCloseRequest> _parser = new pb::MessageParser<FmCloseRequest>(() => new FmCloseRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmCloseRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmCloseRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmCloseRequest(FmCloseRequest other) : this() {
    handle_ = other.handle_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmCloseRequest Clone() {
    return new FmCloseRequest(this);
  }

  /// <summary>Field number for the "handle" field.</summary>
  public const int HandleFieldNumber = 1;
  private int handle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Handle {
    get { return handle_; }
    set {
      handle_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmCloseRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmCloseRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Handle != other.Handle) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Handle != 0) hash ^= Handle.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Handle != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Handle);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Handle != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handle);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmCloseRequest other) {
    if (other == null) {
      return;
    }
    if (other.Handle != 0) {
      Handle = other.Handle;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Handle = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class FmSeekRequest : pb::IMessage<FmSeekRequest> {
  private static readonly pb::MessageParser<FmSeekRequest> _parser = new pb::MessageParser<FmSeekRequest>(() => new FmSeekRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmSeekRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmSeekRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmSeekRequest(FmSeekRequest other) : this() {
    handle_ = other.handle_;
    offset_ = other.offset_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmSeekRequest Clone() {
    return new FmSeekRequest(this);
  }

  /// <summary>Field number for the "handle" field.</summary>
  public const int HandleFieldNumber = 1;
  private int handle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Handle {
    get { return handle_; }
    set {
      handle_ = value;
    }
  }

  /// <summary>Field number for the "offset" field.</summary>
  public const int OffsetFieldNumber = 2;
  private long offset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Offset {
    get { return offset_; }
    set {
      offset_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmSeekRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmSeekRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Handle != other.Handle) return false;
    if (Offset != other.Offset) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Handle != 0) hash ^= Handle.GetHashCode();
    if (Offset != 0L) hash ^= Offset.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Handle != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Handle);
    }
    if (Offset != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Offset);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Handle != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handle);
    }
    if (Offset != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Offset);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmSeekRequest other) {
    if (other == null) {
      return;
    }
    if (other.Handle != 0) {
      Handle = other.Handle;
    }
    if (other.Offset != 0L) {
      Offset = other.Offset;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Handle = input.ReadInt32();
          break;
        }
        case 16: {
          Offset = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class FmReadRequest : pb::IMessage<FmReadRequest> {
  private static readonly pb::MessageParser<FmReadRequest> _parser = new pb::MessageParser<FmReadRequest>(() => new FmReadRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmReadRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmReadRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmReadRequest(FmReadRequest other) : this() {
    handle_ = other.handle_;
    size_ = other.size_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmReadRequest Clone() {
    return new FmReadRequest(this);
  }

  /// <summary>Field number for the "handle" field.</summary>
  public const int HandleFieldNumber = 1;
  private int handle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Handle {
    get { return handle_; }
    set {
      handle_ = value;
    }
  }

  /// <summary>Field number for the "size" field.</summary>
  public const int SizeFieldNumber = 2;
  private ulong size_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Size {
    get { return size_; }
    set {
      size_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmReadRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmReadRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Handle != other.Handle) return false;
    if (Size != other.Size) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Handle != 0) hash ^= Handle.GetHashCode();
    if (Size != 0UL) hash ^= Size.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Handle != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Handle);
    }
    if (Size != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Size);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Handle != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handle);
    }
    if (Size != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Size);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmReadRequest other) {
    if (other == null) {
      return;
    }
    if (other.Handle != 0) {
      Handle = other.Handle;
    }
    if (other.Size != 0UL) {
      Size = other.Size;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Handle = input.ReadInt32();
          break;
        }
        case 16: {
          Size = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class FmReadResponse : pb::IMessage<FmReadResponse> {
  private static readonly pb::MessageParser<FmReadResponse> _parser = new pb::MessageParser<FmReadResponse>(() => new FmReadResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmReadResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmReadResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmReadResponse(FmReadResponse other) : this() {
    data_ = other.data_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmReadResponse Clone() {
    return new FmReadResponse(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmReadResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmReadResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Data != other.Data) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Data.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Data);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmReadResponse other) {
    if (other == null) {
      return;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class FmWriteRequest : pb::IMessage<FmWriteRequest> {
  private static readonly pb::MessageParser<FmWriteRequest> _parser = new pb::MessageParser<FmWriteRequest>(() => new FmWriteRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmWriteRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmWriteRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmWriteRequest(FmWriteRequest other) : this() {
    handle_ = other.handle_;
    data_ = other.data_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmWriteRequest Clone() {
    return new FmWriteRequest(this);
  }

  /// <summary>Field number for the "handle" field.</summary>
  public const int HandleFieldNumber = 1;
  private int handle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Handle {
    get { return handle_; }
    set {
      handle_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 2;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmWriteRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmWriteRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Handle != other.Handle) return false;
    if (Data != other.Data) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Handle != 0) hash ^= Handle.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Handle != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Handle);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Data);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Handle != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handle);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmWriteRequest other) {
    if (other == null) {
      return;
    }
    if (other.Handle != 0) {
      Handle = other.Handle;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Handle = input.ReadInt32();
          break;
        }
        case 18: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class FmDent : pb::IMessage<FmDent> {
  private static readonly pb::MessageParser<FmDent> _parser = new pb::MessageParser<FmDent>(() => new FmDent());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmDent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmDent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmDent(FmDent other) : this() {
    fileno_ = other.fileno_;
    recLen_ = other.recLen_;
    type_ = other.type_;
    name_ = other.name_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmDent Clone() {
    return new FmDent(this);
  }

  /// <summary>Field number for the "fileno" field.</summary>
  public const int FilenoFieldNumber = 1;
  private uint fileno_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Fileno {
    get { return fileno_; }
    set {
      fileno_ = value;
    }
  }

  /// <summary>Field number for the "recLen" field.</summary>
  public const int RecLenFieldNumber = 2;
  private uint recLen_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RecLen {
    get { return recLen_; }
    set {
      recLen_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private uint type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 4;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmDent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmDent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Fileno != other.Fileno) return false;
    if (RecLen != other.RecLen) return false;
    if (Type != other.Type) return false;
    if (Name != other.Name) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Fileno != 0) hash ^= Fileno.GetHashCode();
    if (RecLen != 0) hash ^= RecLen.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Fileno != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Fileno);
    }
    if (RecLen != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(RecLen);
    }
    if (Type != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Type);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Name);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Fileno != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fileno);
    }
    if (RecLen != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecLen);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmDent other) {
    if (other == null) {
      return;
    }
    if (other.Fileno != 0) {
      Fileno = other.Fileno;
    }
    if (other.RecLen != 0) {
      RecLen = other.RecLen;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Fileno = input.ReadUInt32();
          break;
        }
        case 16: {
          RecLen = input.ReadUInt32();
          break;
        }
        case 24: {
          Type = input.ReadUInt32();
          break;
        }
        case 34: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class FmGetDentsRequest : pb::IMessage<FmGetDentsRequest> {
  private static readonly pb::MessageParser<FmGetDentsRequest> _parser = new pb::MessageParser<FmGetDentsRequest>(() => new FmGetDentsRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmGetDentsRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmGetDentsRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmGetDentsRequest(FmGetDentsRequest other) : this() {
    path_ = other.path_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmGetDentsRequest Clone() {
    return new FmGetDentsRequest(this);
  }

  /// <summary>Field number for the "path" field.</summary>
  public const int PathFieldNumber = 1;
  private string path_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Path {
    get { return path_; }
    set {
      path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmGetDentsRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmGetDentsRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Path != other.Path) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Path.Length != 0) hash ^= Path.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Path.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Path);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Path.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmGetDentsRequest other) {
    if (other == null) {
      return;
    }
    if (other.Path.Length != 0) {
      Path = other.Path;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Path = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class FmGetDentsResponse : pb::IMessage<FmGetDentsResponse> {
  private static readonly pb::MessageParser<FmGetDentsResponse> _parser = new pb::MessageParser<FmGetDentsResponse>(() => new FmGetDentsResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmGetDentsResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmGetDentsResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmGetDentsResponse(FmGetDentsResponse other) : this() {
    dents_ = other.dents_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmGetDentsResponse Clone() {
    return new FmGetDentsResponse(this);
  }

  /// <summary>Field number for the "dents" field.</summary>
  public const int DentsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::FmDent> _repeated_dents_codec
      = pb::FieldCodec.ForMessage(10, global::FmDent.Parser);
  private readonly pbc::RepeatedField<global::FmDent> dents_ = new pbc::RepeatedField<global::FmDent>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FmDent> Dents {
    get { return dents_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmGetDentsResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmGetDentsResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!dents_.Equals(other.dents_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= dents_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    dents_.WriteTo(output, _repeated_dents_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += dents_.CalculateSize(_repeated_dents_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmGetDentsResponse other) {
    if (other == null) {
      return;
    }
    dents_.Add(other.dents_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          dents_.AddEntriesFrom(input, _repeated_dents_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class FmTimespec : pb::IMessage<FmTimespec> {
  private static readonly pb::MessageParser<FmTimespec> _parser = new pb::MessageParser<FmTimespec>(() => new FmTimespec());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmTimespec> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmTimespec() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmTimespec(FmTimespec other) : this() {
    tvSec_ = other.tvSec_;
    tvNsec_ = other.tvNsec_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmTimespec Clone() {
    return new FmTimespec(this);
  }

  /// <summary>Field number for the "tv_sec" field.</summary>
  public const int TvSecFieldNumber = 1;
  private long tvSec_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TvSec {
    get { return tvSec_; }
    set {
      tvSec_ = value;
    }
  }

  /// <summary>Field number for the "tv_nsec" field.</summary>
  public const int TvNsecFieldNumber = 2;
  private int tvNsec_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TvNsec {
    get { return tvNsec_; }
    set {
      tvNsec_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmTimespec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmTimespec other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TvSec != other.TvSec) return false;
    if (TvNsec != other.TvNsec) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TvSec != 0L) hash ^= TvSec.GetHashCode();
    if (TvNsec != 0) hash ^= TvNsec.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TvSec != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(TvSec);
    }
    if (TvNsec != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TvNsec);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TvSec != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TvSec);
    }
    if (TvNsec != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TvNsec);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmTimespec other) {
    if (other == null) {
      return;
    }
    if (other.TvSec != 0L) {
      TvSec = other.TvSec;
    }
    if (other.TvNsec != 0) {
      TvNsec = other.TvNsec;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          TvSec = input.ReadInt64();
          break;
        }
        case 16: {
          TvNsec = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class FmStatRequest : pb::IMessage<FmStatRequest> {
  private static readonly pb::MessageParser<FmStatRequest> _parser = new pb::MessageParser<FmStatRequest>(() => new FmStatRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmStatRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmStatRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmStatRequest(FmStatRequest other) : this() {
    handle_ = other.handle_;
    path_ = other.path_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmStatRequest Clone() {
    return new FmStatRequest(this);
  }

  /// <summary>Field number for the "handle" field.</summary>
  public const int HandleFieldNumber = 1;
  private int handle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Handle {
    get { return handle_; }
    set {
      handle_ = value;
    }
  }

  /// <summary>Field number for the "path" field.</summary>
  public const int PathFieldNumber = 2;
  private string path_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Path {
    get { return path_; }
    set {
      path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmStatRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmStatRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Handle != other.Handle) return false;
    if (Path != other.Path) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Handle != 0) hash ^= Handle.GetHashCode();
    if (Path.Length != 0) hash ^= Path.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Handle != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Handle);
    }
    if (Path.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Path);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Handle != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handle);
    }
    if (Path.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmStatRequest other) {
    if (other == null) {
      return;
    }
    if (other.Handle != 0) {
      Handle = other.Handle;
    }
    if (other.Path.Length != 0) {
      Path = other.Path;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Handle = input.ReadInt32();
          break;
        }
        case 18: {
          Path = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class FmStatResponse : pb::IMessage<FmStatResponse> {
  private static readonly pb::MessageParser<FmStatResponse> _parser = new pb::MessageParser<FmStatResponse>(() => new FmStatResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmStatResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmStatResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmStatResponse(FmStatResponse other) : this() {
    stDev_ = other.stDev_;
    stIno_ = other.stIno_;
    stMode_ = other.stMode_;
    stNlink_ = other.stNlink_;
    stUid_ = other.stUid_;
    stGid_ = other.stGid_;
    stRdev_ = other.stRdev_;
    StAtim = other.stAtim_ != null ? other.StAtim.Clone() : null;
    StMtim = other.stMtim_ != null ? other.StMtim.Clone() : null;
    StCtim = other.stCtim_ != null ? other.StCtim.Clone() : null;
    stSize_ = other.stSize_;
    stBlocks_ = other.stBlocks_;
    stBlksize_ = other.stBlksize_;
    stFlags_ = other.stFlags_;
    stGen_ = other.stGen_;
    stLspare_ = other.stLspare_;
    StBirthtim = other.stBirthtim_ != null ? other.StBirthtim.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmStatResponse Clone() {
    return new FmStatResponse(this);
  }

  /// <summary>Field number for the "st_dev" field.</summary>
  public const int StDevFieldNumber = 1;
  private uint stDev_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StDev {
    get { return stDev_; }
    set {
      stDev_ = value;
    }
  }

  /// <summary>Field number for the "st_ino" field.</summary>
  public const int StInoFieldNumber = 2;
  private uint stIno_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StIno {
    get { return stIno_; }
    set {
      stIno_ = value;
    }
  }

  /// <summary>Field number for the "st_mode" field.</summary>
  public const int StModeFieldNumber = 3;
  private uint stMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StMode {
    get { return stMode_; }
    set {
      stMode_ = value;
    }
  }

  /// <summary>Field number for the "st_nlink" field.</summary>
  public const int StNlinkFieldNumber = 4;
  private uint stNlink_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StNlink {
    get { return stNlink_; }
    set {
      stNlink_ = value;
    }
  }

  /// <summary>Field number for the "st_uid" field.</summary>
  public const int StUidFieldNumber = 5;
  private uint stUid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StUid {
    get { return stUid_; }
    set {
      stUid_ = value;
    }
  }

  /// <summary>Field number for the "st_gid" field.</summary>
  public const int StGidFieldNumber = 6;
  private uint stGid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StGid {
    get { return stGid_; }
    set {
      stGid_ = value;
    }
  }

  /// <summary>Field number for the "st_rdev" field.</summary>
  public const int StRdevFieldNumber = 7;
  private uint stRdev_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StRdev {
    get { return stRdev_; }
    set {
      stRdev_ = value;
    }
  }

  /// <summary>Field number for the "st_atim" field.</summary>
  public const int StAtimFieldNumber = 8;
  private global::FmTimespec stAtim_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FmTimespec StAtim {
    get { return stAtim_; }
    set {
      stAtim_ = value;
    }
  }

  /// <summary>Field number for the "st_mtim" field.</summary>
  public const int StMtimFieldNumber = 9;
  private global::FmTimespec stMtim_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FmTimespec StMtim {
    get { return stMtim_; }
    set {
      stMtim_ = value;
    }
  }

  /// <summary>Field number for the "st_ctim" field.</summary>
  public const int StCtimFieldNumber = 10;
  private global::FmTimespec stCtim_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FmTimespec StCtim {
    get { return stCtim_; }
    set {
      stCtim_ = value;
    }
  }

  /// <summary>Field number for the "st_size" field.</summary>
  public const int StSizeFieldNumber = 11;
  private long stSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StSize {
    get { return stSize_; }
    set {
      stSize_ = value;
    }
  }

  /// <summary>Field number for the "st_blocks" field.</summary>
  public const int StBlocksFieldNumber = 12;
  private long stBlocks_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StBlocks {
    get { return stBlocks_; }
    set {
      stBlocks_ = value;
    }
  }

  /// <summary>Field number for the "st_blksize" field.</summary>
  public const int StBlksizeFieldNumber = 13;
  private uint stBlksize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StBlksize {
    get { return stBlksize_; }
    set {
      stBlksize_ = value;
    }
  }

  /// <summary>Field number for the "st_flags" field.</summary>
  public const int StFlagsFieldNumber = 14;
  private uint stFlags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StFlags {
    get { return stFlags_; }
    set {
      stFlags_ = value;
    }
  }

  /// <summary>Field number for the "st_gen" field.</summary>
  public const int StGenFieldNumber = 15;
  private uint stGen_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StGen {
    get { return stGen_; }
    set {
      stGen_ = value;
    }
  }

  /// <summary>Field number for the "st_lspare" field.</summary>
  public const int StLspareFieldNumber = 16;
  private int stLspare_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StLspare {
    get { return stLspare_; }
    set {
      stLspare_ = value;
    }
  }

  /// <summary>Field number for the "st_birthtim" field.</summary>
  public const int StBirthtimFieldNumber = 17;
  private global::FmTimespec stBirthtim_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FmTimespec StBirthtim {
    get { return stBirthtim_; }
    set {
      stBirthtim_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmStatResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmStatResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StDev != other.StDev) return false;
    if (StIno != other.StIno) return false;
    if (StMode != other.StMode) return false;
    if (StNlink != other.StNlink) return false;
    if (StUid != other.StUid) return false;
    if (StGid != other.StGid) return false;
    if (StRdev != other.StRdev) return false;
    if (!object.Equals(StAtim, other.StAtim)) return false;
    if (!object.Equals(StMtim, other.StMtim)) return false;
    if (!object.Equals(StCtim, other.StCtim)) return false;
    if (StSize != other.StSize) return false;
    if (StBlocks != other.StBlocks) return false;
    if (StBlksize != other.StBlksize) return false;
    if (StFlags != other.StFlags) return false;
    if (StGen != other.StGen) return false;
    if (StLspare != other.StLspare) return false;
    if (!object.Equals(StBirthtim, other.StBirthtim)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StDev != 0) hash ^= StDev.GetHashCode();
    if (StIno != 0) hash ^= StIno.GetHashCode();
    if (StMode != 0) hash ^= StMode.GetHashCode();
    if (StNlink != 0) hash ^= StNlink.GetHashCode();
    if (StUid != 0) hash ^= StUid.GetHashCode();
    if (StGid != 0) hash ^= StGid.GetHashCode();
    if (StRdev != 0) hash ^= StRdev.GetHashCode();
    if (stAtim_ != null) hash ^= StAtim.GetHashCode();
    if (stMtim_ != null) hash ^= StMtim.GetHashCode();
    if (stCtim_ != null) hash ^= StCtim.GetHashCode();
    if (StSize != 0L) hash ^= StSize.GetHashCode();
    if (StBlocks != 0L) hash ^= StBlocks.GetHashCode();
    if (StBlksize != 0) hash ^= StBlksize.GetHashCode();
    if (StFlags != 0) hash ^= StFlags.GetHashCode();
    if (StGen != 0) hash ^= StGen.GetHashCode();
    if (StLspare != 0) hash ^= StLspare.GetHashCode();
    if (stBirthtim_ != null) hash ^= StBirthtim.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StDev != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(StDev);
    }
    if (StIno != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(StIno);
    }
    if (StMode != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(StMode);
    }
    if (StNlink != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(StNlink);
    }
    if (StUid != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(StUid);
    }
    if (StGid != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(StGid);
    }
    if (StRdev != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(StRdev);
    }
    if (stAtim_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(StAtim);
    }
    if (stMtim_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(StMtim);
    }
    if (stCtim_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(StCtim);
    }
    if (StSize != 0L) {
      output.WriteRawTag(88);
      output.WriteInt64(StSize);
    }
    if (StBlocks != 0L) {
      output.WriteRawTag(96);
      output.WriteInt64(StBlocks);
    }
    if (StBlksize != 0) {
      output.WriteRawTag(104);
      output.WriteUInt32(StBlksize);
    }
    if (StFlags != 0) {
      output.WriteRawTag(112);
      output.WriteUInt32(StFlags);
    }
    if (StGen != 0) {
      output.WriteRawTag(120);
      output.WriteUInt32(StGen);
    }
    if (StLspare != 0) {
      output.WriteRawTag(128, 1);
      output.WriteInt32(StLspare);
    }
    if (stBirthtim_ != null) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(StBirthtim);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StDev != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StDev);
    }
    if (StIno != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StIno);
    }
    if (StMode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StMode);
    }
    if (StNlink != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StNlink);
    }
    if (StUid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StUid);
    }
    if (StGid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StGid);
    }
    if (StRdev != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StRdev);
    }
    if (stAtim_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StAtim);
    }
    if (stMtim_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StMtim);
    }
    if (stCtim_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StCtim);
    }
    if (StSize != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StSize);
    }
    if (StBlocks != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StBlocks);
    }
    if (StBlksize != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StBlksize);
    }
    if (StFlags != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StFlags);
    }
    if (StGen != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StGen);
    }
    if (StLspare != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(StLspare);
    }
    if (stBirthtim_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StBirthtim);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmStatResponse other) {
    if (other == null) {
      return;
    }
    if (other.StDev != 0) {
      StDev = other.StDev;
    }
    if (other.StIno != 0) {
      StIno = other.StIno;
    }
    if (other.StMode != 0) {
      StMode = other.StMode;
    }
    if (other.StNlink != 0) {
      StNlink = other.StNlink;
    }
    if (other.StUid != 0) {
      StUid = other.StUid;
    }
    if (other.StGid != 0) {
      StGid = other.StGid;
    }
    if (other.StRdev != 0) {
      StRdev = other.StRdev;
    }
    if (other.stAtim_ != null) {
      if (stAtim_ == null) {
        stAtim_ = new global::FmTimespec();
      }
      StAtim.MergeFrom(other.StAtim);
    }
    if (other.stMtim_ != null) {
      if (stMtim_ == null) {
        stMtim_ = new global::FmTimespec();
      }
      StMtim.MergeFrom(other.StMtim);
    }
    if (other.stCtim_ != null) {
      if (stCtim_ == null) {
        stCtim_ = new global::FmTimespec();
      }
      StCtim.MergeFrom(other.StCtim);
    }
    if (other.StSize != 0L) {
      StSize = other.StSize;
    }
    if (other.StBlocks != 0L) {
      StBlocks = other.StBlocks;
    }
    if (other.StBlksize != 0) {
      StBlksize = other.StBlksize;
    }
    if (other.StFlags != 0) {
      StFlags = other.StFlags;
    }
    if (other.StGen != 0) {
      StGen = other.StGen;
    }
    if (other.StLspare != 0) {
      StLspare = other.StLspare;
    }
    if (other.stBirthtim_ != null) {
      if (stBirthtim_ == null) {
        stBirthtim_ = new global::FmTimespec();
      }
      StBirthtim.MergeFrom(other.StBirthtim);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          StDev = input.ReadUInt32();
          break;
        }
        case 16: {
          StIno = input.ReadUInt32();
          break;
        }
        case 24: {
          StMode = input.ReadUInt32();
          break;
        }
        case 32: {
          StNlink = input.ReadUInt32();
          break;
        }
        case 40: {
          StUid = input.ReadUInt32();
          break;
        }
        case 48: {
          StGid = input.ReadUInt32();
          break;
        }
        case 56: {
          StRdev = input.ReadUInt32();
          break;
        }
        case 66: {
          if (stAtim_ == null) {
            stAtim_ = new global::FmTimespec();
          }
          input.ReadMessage(stAtim_);
          break;
        }
        case 74: {
          if (stMtim_ == null) {
            stMtim_ = new global::FmTimespec();
          }
          input.ReadMessage(stMtim_);
          break;
        }
        case 82: {
          if (stCtim_ == null) {
            stCtim_ = new global::FmTimespec();
          }
          input.ReadMessage(stCtim_);
          break;
        }
        case 88: {
          StSize = input.ReadInt64();
          break;
        }
        case 96: {
          StBlocks = input.ReadInt64();
          break;
        }
        case 104: {
          StBlksize = input.ReadUInt32();
          break;
        }
        case 112: {
          StFlags = input.ReadUInt32();
          break;
        }
        case 120: {
          StGen = input.ReadUInt32();
          break;
        }
        case 128: {
          StLspare = input.ReadInt32();
          break;
        }
        case 138: {
          if (stBirthtim_ == null) {
            stBirthtim_ = new global::FmTimespec();
          }
          input.ReadMessage(stBirthtim_);
          break;
        }
      }
    }
  }

}

public sealed partial class FmMkdirRequest : pb::IMessage<FmMkdirRequest> {
  private static readonly pb::MessageParser<FmMkdirRequest> _parser = new pb::MessageParser<FmMkdirRequest>(() => new FmMkdirRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmMkdirRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmMkdirRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmMkdirRequest(FmMkdirRequest other) : this() {
    mode_ = other.mode_;
    path_ = other.path_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmMkdirRequest Clone() {
    return new FmMkdirRequest(this);
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 1;
  private int mode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  /// <summary>Field number for the "path" field.</summary>
  public const int PathFieldNumber = 2;
  private string path_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Path {
    get { return path_; }
    set {
      path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmMkdirRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmMkdirRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Mode != other.Mode) return false;
    if (Path != other.Path) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Mode != 0) hash ^= Mode.GetHashCode();
    if (Path.Length != 0) hash ^= Path.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Mode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Mode);
    }
    if (Path.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Path);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Mode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
    }
    if (Path.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmMkdirRequest other) {
    if (other == null) {
      return;
    }
    if (other.Mode != 0) {
      Mode = other.Mode;
    }
    if (other.Path.Length != 0) {
      Path = other.Path;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Mode = input.ReadInt32();
          break;
        }
        case 18: {
          Path = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class FmRmdirRequest : pb::IMessage<FmRmdirRequest> {
  private static readonly pb::MessageParser<FmRmdirRequest> _parser = new pb::MessageParser<FmRmdirRequest>(() => new FmRmdirRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmRmdirRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmRmdirRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmRmdirRequest(FmRmdirRequest other) : this() {
    path_ = other.path_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmRmdirRequest Clone() {
    return new FmRmdirRequest(this);
  }

  /// <summary>Field number for the "path" field.</summary>
  public const int PathFieldNumber = 1;
  private string path_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Path {
    get { return path_; }
    set {
      path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmRmdirRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmRmdirRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Path != other.Path) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Path.Length != 0) hash ^= Path.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Path.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Path);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Path.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmRmdirRequest other) {
    if (other == null) {
      return;
    }
    if (other.Path.Length != 0) {
      Path = other.Path;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Path = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class FmUnlinkRequest : pb::IMessage<FmUnlinkRequest> {
  private static readonly pb::MessageParser<FmUnlinkRequest> _parser = new pb::MessageParser<FmUnlinkRequest>(() => new FmUnlinkRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmUnlinkRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmUnlinkRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmUnlinkRequest(FmUnlinkRequest other) : this() {
    path_ = other.path_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmUnlinkRequest Clone() {
    return new FmUnlinkRequest(this);
  }

  /// <summary>Field number for the "path" field.</summary>
  public const int PathFieldNumber = 1;
  private string path_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Path {
    get { return path_; }
    set {
      path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmUnlinkRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmUnlinkRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Path != other.Path) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Path.Length != 0) hash ^= Path.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Path.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Path);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Path.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmUnlinkRequest other) {
    if (other == null) {
      return;
    }
    if (other.Path.Length != 0) {
      Path = other.Path;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Path = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class FmDecryptSelfRequest : pb::IMessage<FmDecryptSelfRequest> {
  private static readonly pb::MessageParser<FmDecryptSelfRequest> _parser = new pb::MessageParser<FmDecryptSelfRequest>(() => new FmDecryptSelfRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmDecryptSelfRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmDecryptSelfRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmDecryptSelfRequest(FmDecryptSelfRequest other) : this() {
    path_ = other.path_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmDecryptSelfRequest Clone() {
    return new FmDecryptSelfRequest(this);
  }

  /// <summary>Field number for the "path" field.</summary>
  public const int PathFieldNumber = 1;
  private string path_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Path {
    get { return path_; }
    set {
      path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmDecryptSelfRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmDecryptSelfRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Path != other.Path) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Path.Length != 0) hash ^= Path.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Path.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Path);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Path.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmDecryptSelfRequest other) {
    if (other == null) {
      return;
    }
    if (other.Path.Length != 0) {
      Path = other.Path;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Path = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class FmDecryptSelfResponse : pb::IMessage<FmDecryptSelfResponse> {
  private static readonly pb::MessageParser<FmDecryptSelfResponse> _parser = new pb::MessageParser<FmDecryptSelfResponse>(() => new FmDecryptSelfResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FmDecryptSelfResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FilemanagerReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmDecryptSelfResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmDecryptSelfResponse(FmDecryptSelfResponse other) : this() {
    data_ = other.data_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FmDecryptSelfResponse Clone() {
    return new FmDecryptSelfResponse(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FmDecryptSelfResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FmDecryptSelfResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Data != other.Data) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Data.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Data);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FmDecryptSelfResponse other) {
    if (other == null) {
      return;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
